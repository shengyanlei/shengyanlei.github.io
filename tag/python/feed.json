{
    "version": "https://jsonfeed.org/version/1",
    "title": "碎念随风 • All posts by \"python\" tag",
    "description": "人海未见之时，我亦独行在这城市。 料峭，春醒，酷暑，骤雨，寒意四起，大雁南飞，而后，大雪，寒风， 斗转星移，人间寒暑。",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/24/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "http://example.com/2023/10/24/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "Python网络爬虫（二）",
            "date_published": "2023-10-24T07:34:44.000Z",
            "content_html": "<h3 id=\"一-request库\"><a class=\"markdownIt-Anchor\" href=\"#一-request库\">#</a> 一、request 库</h3>\n<p>Requests 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。这是官方的文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXF1ZXN0cy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3Qv\">request 官方文档</span>（官方文档不太容易看懂😹）可以选择菜鸟教程里面的 requests 库讲解<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9weXRob24zL3B5dGhvbi1yZXF1ZXN0cy5odG1s\">菜鸟教程</span>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性或方法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">apparent_encoding</td>\n<td style=\"text-align:left\">编码方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">close()</td>\n<td style=\"text-align:left\">关闭与服务器的连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">content</td>\n<td style=\"text-align:left\">返回响应的内容，以字节为单位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cookies</td>\n<td style=\"text-align:left\">返回一个 CookieJar 对象，包含了从服务器发回的 cookie</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">elapsed</td>\n<td style=\"text-align:left\">返回一个 timedelta 对象，包含了从发送请求到响应到达之间经过的时间量，可以用于测试响应速度。比如 r.elapsed.microseconds 表示响应到达需要多少微秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">encoding</td>\n<td style=\"text-align:left\">解码 r.text 的编码方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">headers</td>\n<td style=\"text-align:left\">返回响应头，字典格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">history</td>\n<td style=\"text-align:left\">返回包含请求历史的响应对象列表（url）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">is_permanent_redirect</td>\n<td style=\"text-align:left\">如果响应是永久重定向的 url，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">is_redirect</td>\n<td style=\"text-align:left\">如果响应被重定向，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iter_content()</td>\n<td style=\"text-align:left\">迭代响应</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iter_lines()</td>\n<td style=\"text-align:left\">迭代响应的行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">json()</td>\n<td style=\"text-align:left\">返回结果的 JSON 对象 (结果需要以 JSON 格式编写的，否则会引发错误)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">links</td>\n<td style=\"text-align:left\">返回响应的解析头链接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">next</td>\n<td style=\"text-align:left\">返回重定向链中下一个请求的 PreparedRequest 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ok</td>\n<td style=\"text-align:left\">检查 “status_code” 的值，如果小于 400，则返回 True，如果不小于 400，则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">raise_for_status()</td>\n<td style=\"text-align:left\">如果发生错误，方法返回一个 HTTPError 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reason</td>\n<td style=\"text-align:left\">响应状态的描述，比如 “Not Found” 或 “OK”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">request</td>\n<td style=\"text-align:left\">返回请求此响应的请求对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">status_code</td>\n<td style=\"text-align:left\">返回 http 的状态码，比如 404 和 200（200 是 OK，404 是 Not Found）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">返回响应的内容，unicode 类型数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">url</td>\n<td style=\"text-align:left\">返回响应的 URL</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"二-beautiful-soup库\"><a class=\"markdownIt-Anchor\" href=\"#二-beautiful-soup库\">#</a> 二、Beautiful soup 库</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZWF1dGlmdWxzb3VwLmNuLw==\">Beautiful Soup</span> 是一个可以从 HTML 或 XML 文件中提取数据的 Python 库。它能够通过你喜欢的转换器实现惯用的文档导航，查找，修改文档的方式.Beautiful Soup 会帮你节省数小时甚至数天的工作时间.</p>\n<p>下表列出了主要的解析器，以及它们的优缺点:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">解析器</th>\n<th style=\"text-align:left\">使用方法</th>\n<th style=\"text-align:left\">优势</th>\n<th style=\"text-align:left\">劣势</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Python 标准库</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td>\n<td style=\"text-align:left\">Python 的内置标准库执行速度适中文档容错能力强</td>\n<td style=\"text-align:left\">Python 2.7.3 or 3.2.2) 前 的版本中文档容错能力差</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml HTML 解析器</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td>\n<td style=\"text-align:left\">速度快文档容错能力强</td>\n<td style=\"text-align:left\">需要安装 C 语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml XML 解析器</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, [&quot;lxml-xml&quot;])``BeautifulSoup(markup, &quot;xml&quot;)</code></td>\n<td style=\"text-align:left\">速度快唯一支持 XML 的解析器</td>\n<td style=\"text-align:left\">需要安装 C 语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">html5lib</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td>\n<td style=\"text-align:left\">最好的容错性以浏览器的方式解析文档生成 HTML5 格式的文档</td>\n<td style=\"text-align:left\">速度慢不依赖外部扩展</td>\n</tr>\n</tbody>\n</table>\n<p>将一段文档传入 BeautifulSoup 的构造方法，就能得到一个文档的对象，可以传入一段字符串或一个文件句柄.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;html>data&lt;/html>\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"beautiful-soup的4种对象\"><a class=\"markdownIt-Anchor\" href=\"#beautiful-soup的4种对象\">#</a> Beautiful Soup 的 4 种对象</h4>\n<p>Beautiful Soup 将复杂 HTML 文档转换成一个复杂的树形结构，每个节点都是 Python 对象，所有对象可以归纳为 4 种:  <code>Tag</code>  ,  <code>NavigableString</code>  ,  <code>BeautifulSoup</code>  ,  <code>Comment</code>  .</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>html_doc <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;p class=\"title\">&lt;b>The Dormouse's story&lt;/b>&lt;/p></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;p class=\"story\">Once upon a time there were three little sisters; and their names were</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie&lt;/a>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie&lt;/a> and</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie&lt;/a>;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>and they lived at the bottom of a well.&lt;/p></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&lt;p class=\"story\">...&lt;/p></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p class=\"note note-danger\">以下代码块中  `#` 后面的内容一般代指输出结果</p>\n<ol>\n<li><em><strong>Tag</strong></em></li>\n</ol>\n<p><code>Tag</code>  对象与 XML 或 HTML 原生文档中的 tag 相同:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;b class=\"boldest\">Extremely bold&lt;/b>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tag <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.Tag'></span></pre></td></tr></table></figure><p><font style='color:red'>tag 中最重要的属性: name 和 attributes</font></p>\n<ul>\n<li>Name: 每个 tag 都有自己的名字，通过  <code>.name</code>  来获取:</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># a</span></pre></td></tr></table></figure><p>如果改变了 tag 的 name, 那将影响所有通过当前 Beautiful Soup 对象生成的 HTML 文档:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">'你好'</span> <span class=\"token comment\">#只会修改第一个 a 标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>你好<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#&lt; 你好 class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/ 你好 ></span></pre></td></tr></table></figure><ul>\n<li>Attributes: 一个 tag 可能有很多个属性. tag  <code>&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</code>  有一个 “class” 的属性，值为 “sister” .<font style='color:red'> tag 的属性的操作方法与字典相同；可以使用 <code>.attrs</code>  老获取全部属性 </font></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#['sister']</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># link1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>attrs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># &#123;'href': 'http://example.com/elsie', 'class': ['sister'], 'id': 'link1'&#125;</span></pre></td></tr></table></figure><p class=\"note note-primary\">tag的属性可以被添加,删除或修改.tag的属性操作方法与字典一样<br>以下方法 只针对遇到的第一个标签的属性</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#新增</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'增加'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\" insert=\"增加\">Elsie&lt;/a></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#删除</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">del</span> soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># &lt;a href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 修改</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'brother'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># &#123;'href': 'http://example.com/elsie', 'class': 'brother', 'id': 'link1'&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><em><strong>NavigableString</strong></em>（可以遍历的字符串）</li>\n</ol>\n<p>字符串常被包含在 tag 内.Beautiful Soup 用  <code>NavigableString</code>  类来包装 tag 中的字符串:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>string</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Elsie</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'bs4.element.NavigableString'</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p><font style='color:red'>tag 中包含的字符串不能编辑，但是可以被替换成其它的字符串，用 replace_with () 方法</font></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>replace_with<span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"> 你好 & lt;/a></span></pre></td></tr></table></figure><ol start=\"3\">\n<li><em><strong>BeautifulSoup</strong></em></li>\n</ol>\n<p><code>BeautifulSoup</code>  对象表示的是一个文档的全部内容。大部分时候，可以把它当作  <code>Tag</code>  对象，它支持 遍历文档树 和 搜索文档树中描述的大部分的方法。</p>\n<ol start=\"4\">\n<li><em><strong>comment</strong></em></li>\n</ol>\n<p><code>Tag</code>  ,  <code>NavigableString</code>  ,  <code>BeautifulSoup</code>  几乎覆盖了 html 和 xml 中的所有内容，但是还有一些特殊对象。容易让人担心的内容是文档的注释部分:</p>\n<ul>\n<li>Coment 对象是一个特殊类型的 NavigableString 对象。</li>\n<li>如果标签内部的内容是注释，例如： <code>&lt;!-- Elsie --&gt;</code> 。那么该 NavigableSring 对象会转换成 Comment 对象，并且会把注释符号去掉。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>markup <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b>&lt;!--Hey, buddy. Want to buy a used parser?-->&lt;/b>\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>markup<span class=\"token punctuation\">,</span><span class=\"token string\">'lxml'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>text<span class=\"token operator\">+</span><span class=\"token string\">'输出为空'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#输出为空</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>comment <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>string</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Hey, buddy. Want to buy a used parser?</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.Comment'></span></pre></td></tr></table></figure><h4 id=\"遍历文档树\"><a class=\"markdownIt-Anchor\" href=\"#遍历文档树\">#</a> 遍历文档树</h4>\n<ol>\n<li><em><strong>子结点</strong></em></li>\n</ol>\n<p>一个 Tag 可能包含多个字符串或其它的 Tag, 这些都是这个 Tag 的子节点.Beautiful Soup 提供了许多操作和遍历子节点的属性.</p>\n<p><font style=\"color:red\">注意: Beautiful Soup 中字符串节点不支持这些属性，因为字符串没有子节点</font></p>\n<ol start=\"2\">\n<li><em><strong>tag 的名字</strong></em></li>\n</ol>\n<p>操作文档树最简单的方法就是告诉它你想获取的 tag 的 name. 如果想获取 <head> 标签，只要用  <code>soup.head</code>  :</p>\n<pre><code class=\"language-Python\">soup.head\n# &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n\nsoup.title\n# &lt;title&gt;The Dormouse's story&lt;/title&gt;\n</code></pre>\n<p>这是个获取 tag 的小窍门，可以在文档树的 tag 中多次调用这个方法。下面的代码可以获取 <code>&lt;body&gt;</code>  标签中的第一个 <code>&lt;b&gt;</code>  标签:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># &lt;b>The Dormouse's story&lt;/b></span></pre></td></tr></table></figure><p class=\"note note-info\">Tip:通过点取属性的方式只能获得当前名字的第一个tag:</p>\n<p>如果想要得到所有的 <code>&lt;a&gt;</code>  标签，或是通过名字得到比一个 tag 更多的内容的时候，就需要用到 Searching the tree 中描述的方法，比如: find_all ()</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># [&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a>, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie&lt;/a>, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie&lt;/a>]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.ResultSet'></span></pre></td></tr></table></figure><ol start=\"3\">\n<li><em><strong>.contents 和 .children</strong></em></li>\n</ol>\n<p>tag 的  <code>.contents</code>  属性可以将 tag 的子节点以列表的方式输出:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>contents</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># ['\\n', &lt;p class=\"title\">&lt;b>The Dormouse's story&lt;/b>&lt;/p>, '\\n', &lt;p class=\"story\">Once upon a time there were three little sisters; and their names were &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a>, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie&lt;/a> and &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie&lt;/a>; and they lived at the bottom of a well.&lt;/p>, '\\n', &lt;p class=\"story\">...&lt;/p>, '\\n']</span></pre></td></tr></table></figure><p>通过 tag 的  <code>.children</code>  生成器，可以对 tag 的子节点进行循环:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># &lt;class 'list_iterator'> 迭代器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#                      &lt; 第一行数据为空 >    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.NavigableString</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#&lt;p class=\"title\">&lt;b>The Dormouse's story&lt;/b>&lt;/p></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#&lt;class 'bs4.element.Tag'></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># &lt;p class=\"story\">Once upon a time there were three little sisters; and their names were</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a>,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie&lt;/a> and</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie&lt;/a>;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># and they lived at the bottom of a well.&lt;/p></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.Tag'></span></pre></td></tr></table></figure><ol start=\"4\">\n<li><em><strong>.descendants</strong></em></li>\n</ol>\n<p><code>.contents</code>  和  <code>.children</code>  属性仅包含 tag 的直接子节点。例如，<head>标签只有一个直接子节点<title></p>\n<pre><code>head_tag.contents\n# [&lt;title&gt;The Dormouse's story&lt;/title&gt;]\n</code></pre>\n<p>但是<title>标签也包含一个子节点：字符串 “The Dormouse’s story”, 这种情况下字符串 “The Dormouse’s story” 也属于<head>标签的子孙节点.  <code>.descendants</code>  属性可以对所有 tag 的子孙节点进行递归循环</p>\n",
            "tags": [
                "Python",
                "爬虫"
            ]
        },
        {
            "id": "http://example.com/2023/10/24/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%80/",
            "url": "http://example.com/2023/10/24/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%80/",
            "title": "Python网络爬虫（一）",
            "date_published": "2023-10-24T01:21:16.000Z",
            "content_html": "<h3 id=\"一-爬虫简介\"><a class=\"markdownIt-Anchor\" href=\"#一-爬虫简介\">#</a> 一、爬虫简介</h3>\n<p>网络爬虫（又称为网页蜘蛛，网络机器人，在 FOAF 社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p>\n<h3 id=\"二-网站robots协议\"><a class=\"markdownIt-Anchor\" href=\"#二-网站robots协议\">#</a> 二、网站 robots 协议</h3>\n<p>robots 是搜索引擎爬虫协议，也就是你网站和爬虫的协议。</p>\n<p>** 简单的理解：**robots 是告诉搜索引擎，你可以爬取收录我的什么页面，你不可以爬取和收录我的那些页面。robots 很好的控制网站那些页面可以被爬取，那些页面不可以被爬取。</p>\n<p><strong>主流的搜索引擎都会遵守 robots 协议</strong>。并且 robots 协议是爬虫爬取网站第一个需要爬取的文件。爬虫爬取 robots 文件后，会读取上面的协议，并准守协议爬取网站，收录网站。</p>\n<p><strong>robots 文件是一个纯文本文件，也就是常见的.txt 文件</strong>。在这个文件中网站管理者可以声明该网站中不想被 robots 访问的部分，或者指定搜索引擎只收录指定的内容。因此，robots 的优化会直接影响到搜索引擎对网站的收录情况。</p>\n<h5 id=\"存放目录\"><a class=\"markdownIt-Anchor\" href=\"#存放目录\">#</a> 存放目录</h5>\n<p><strong>robots 文件必须要存放在网站的根目录下</strong>。也就是 域名 /robots.txt 是可以访问文件的。你们也可以尝试访问别人网站的 robots 文件。 输入域名 /robots.txt 即可访问。示例：知乎</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcm9ib3RzLnR4dA==\">知乎的 robots 文件</span></p>\n<h5 id=\"robots写作语法\"><a class=\"markdownIt-Anchor\" href=\"#robots写作语法\">#</a> robots 写作语法</h5>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User-agent: Googlebot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>User-agent: Googlebot-Image</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>User-agent: Baiduspider-news</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>User-agent: Baiduspider</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>User-agent: Baiduspider-render</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>User-agent: Baiduspider-image</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>User-agent: bingbot</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>User-Agent: *</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Disallow: /</pre></td></tr></table></figure><p>user-agent 这句代码表示那个搜索引擎准守协议。user-agent 后面为搜索机器人名称，如果是 “*” 号，则泛指所有的搜索引擎机器人；案例中显示 “User-agent: *” 表示所有搜索引擎准守，* 号表示所有。</p>\n<p>Disallow 是禁止爬取的意思。Disallow 后面是不允许访问文件目录（你可以理解为路径中包含改字符、都不会爬取）。案例中显示 “Disallow: /?s*” 表示路径中带有 “/?s” 的路径都不能爬取。 * 代表匹配所有。 这里需要主机。 Disallow 空格一个，/ 必须为开头。</p>\n<p>如果 “Disallow: /” 因为所有路径都包含 / ，所以这表示禁止爬取网站所有内容。</p>\n<p><font style=\"color:red\">如果没有被禁止到的路径，默认为可以被爬取。</font></p>\n<h5 id=\"关于robots的注意事项\"><a class=\"markdownIt-Anchor\" href=\"#关于robots的注意事项\">#</a> 关于 robots 的注意事项</h5>\n<ol>\n<li>\n<p>不要禁止爬虫爬取网站的所有，因为从经验来看，如果屏蔽一次，解封后好一段时间爬虫都不会来你网站，收录成为问题。</p>\n</li>\n<li>\n<p>代码后需要【冒号 + 空格 + 斜杆】 ，比如 “Disallow: /<em>?</em> ”</p>\n</li>\n<li>\n<p>当网站为静态路径时，需要屏蔽掉所有动态链接。网站中存在一种链接被收录即可，避免一个页面 2 个链接。代码如下 “Disallow: /<em>?</em> ” 表示禁止所有带？号的网址被爬取。通常动态网址带有 “?”“=” 等。</p>\n</li>\n<li>\n<p>根据自己网站情况定，屏蔽不需要收录的网址。</p>\n</li>\n</ol>\n<h3 id=\"三-爬虫语言的选择\"><a class=\"markdownIt-Anchor\" href=\"#三-爬虫语言的选择\">#</a> 三、爬虫语言的选择</h3>\n<p>很多人提到爬虫就会想到 Python，其实除了 Python，其他的语言诸如 C，PHP，Java 等等都可以写爬虫，而且一般来说这些语言的执行效率还要比 Python 要高，但为什么目前来说，Python 渐渐成为了写很多人写爬虫的第一选择，简单总结了以下几点：</p>\n<ul>\n<li>\n<p><em><strong>开发效率高</strong></em>，代码简洁，一行代码就可完成请求，100 行可以完成一个复杂的爬虫任务；</p>\n</li>\n<li>\n<p><em><strong>爬虫对于代码执行效率要求不高</strong></em>，网站 IO 才是最影响爬虫效率的。如一个网页请求可能需要 100ms，数据处理 10ms 还是 1ms 影响不大；</p>\n</li>\n<li>\n<p><em><strong>非常多优秀的第三方库</strong></em>，如 requests，beautifulsoup，selenium 等等；</p>\n</li>\n</ul>\n<h3 id=\"四-http请求类型\"><a class=\"markdownIt-Anchor\" href=\"#四-http请求类型\">#</a> 四、HTTP 请求类型</h3>\n<p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p>\n<p><strong>HTTP1.0 定义了三种请求方法</strong>： GET, POST 和 HEAD 方法。</p>\n<p><strong>HTTP1.1 新增了六种请求方法</strong>：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><strong>GET</strong></td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD</td>\n<td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>POST</strong></td>\n<td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和 / 或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT</td>\n<td>从客户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTIONS</td>\n<td>允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n<tr>\n<td>9</td>\n<td>PATCH</td>\n<td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"五-http-状态码\"><a class=\"markdownIt-Anchor\" href=\"#五-http-状态码\">#</a> 五、HTTP 状态码</h3>\n<ul>\n<li>200 - 请求成功</li>\n<li>301 - 资源（网页等）被永久转移到其它 URL</li>\n<li>404 - 请求的资源（网页等）不存在</li>\n<li>500 - 内部服务器错误</li>\n</ul>\n<p><strong>所有的状态代码的取值一般在 100-599 之间，超出这个范围的响应状态码就不是标准的状态响应码了。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">所有的状态码</span>可以分成 5 类：</strong></p>\n<ul>\n<li>100–199：信息反馈（Informational responses）；</li>\n<li>200–299：成功反馈（Successful responses），上面的代码的 200 status code 就属于这里；</li>\n<li>300–399：重定向消息（Redirection messages）；</li>\n<li>400–499：客户端错误响应（Client error responses），这个区间包含了我们常见的 403 和 404 错误响应码</li>\n<li>500–599：服务器错误响应（Server error responses）</li>\n</ul>\n<h3 id=\"六-requests-中-get-与-post-的-headers-参数\"><a class=\"markdownIt-Anchor\" href=\"#六-requests-中-get-与-post-的-headers-参数\">#</a> 六、requests 中 get 与 post 的 headers 参数</h3>\n<p>在编写爬虫的过程中，有些网站会设置反爬机制，对不是来源于浏览器的访问进行拒绝，此时我们会收到 403 错误响应码，或者收到 “抱歉，无法访问 “等字眼，这就需要在爬虫程序中修改请求的 headers 伪装浏览器访问，从而绕开网站的反爬机制获取正确的页面。</p>\n<h5 id=\"1了解-requests-中-get-与-post-的-headers-参数\"><a class=\"markdownIt-Anchor\" href=\"#1了解-requests-中-get-与-post-的-headers-参数\">#</a> 1. 了解 requests 中 get 与 post 的 headers 参数</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \"headers\": &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"Accept\": \"*/*\", </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"Accept-Encoding\": \"gzip, deflate\", </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"Host\": \"httpbin.org\", </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"User-Agent\": \"python-requests/2.31.0\", </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"X-Amzn-Trace-Id\": \"Root=1-65373fd4-71bd6a663234e7c4749aa450\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure><p class=\"note note-success\">User-Agent: 用户代理（英语：User Agent）指的是代表用户行为的软件代理程序所提供的对自己的一个标识符。用于标识浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识</p>\n<p>我们直接用 request 包，上来就调用 get 或者 post 方法，对方的服务器会根据我们发送的 **“User-Agent”: “python-requests/2.31.0”** 了解到，你是用 python 调用的 request 包来访问他们的服务器的。由于这种行为仅仅是消耗服务器资源带来成本，但是不会给对方带来任何好处（搜索引擎的爬虫除外），所以有一些网站会加入反爬机制，通过识别 headers 来拒绝对你的请求进行响应。</p>\n<p><font style='color:red'>因此，我们需要在发送的请求中加入自定义的 headers，将我们的请求伪装成利用浏览器进行的请求。</font></p>\n<h5 id=\"2查看浏览器headers的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#2查看浏览器headers的常用方法\">#</a> 2. 查看浏览器 headers 的常用方法</h5>\n<p>在浏览器的网页上：F12 打开检查 ——&gt; Network ——&gt; Doc ——&gt; 在 Name 里找到对应的请求文件 ——&gt; 在右边选择标头 标签页，找到 “请求标头”，就可以看到我们发送给服务器的 headers。</p>\n<img data-src='https://note.youdao.com/yws/api/personal/file/WEB0ac4a14cf94a00e27fc74a8ca69b6de8?method=download&shareKey=5942d087f7e28642d8ef3cb59bc1b2e1'>\n<p>同理，服务器在发给我们信息的时候，也会发送 Headers。我们同样在上面的选择路径，可以看到 “Response Headers”。</p>\n<img data-src='https://note.youdao.com/yws/api/personal/file/WEBa24eee38235b2443609b6227b8e57e22?method=download&shareKey=23a40e0611844ba2d9c900dad3abcaf7'>\n<p>我们可以查看到服务器响应返回的头信息知道响应结果的编码是 utf-8，有的还可以看到服务器所用是 apache 或是其他 web 服务器。</p>\n<h5 id=\"3headers-的解读\"><a class=\"markdownIt-Anchor\" href=\"#3headers-的解读\">#</a> 3.Headers 的解读</h5>\n<ol>\n<li>User-Agent 的格式解读</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.61</pre></td></tr></table></figure><ul>\n<li>Mozilla/5.0 (WindowsNT 10.0; Win64; x64)：表示代理服务器的操作系统和版本。这里表示代理服务器是在 Windows 10 64 位操作系统上运行的。</li>\n<li>AppleWebKit/537.36 (KHTML, like Gecko)：表示代理服务器使用的浏览器引擎。这里表示代理服务器使用的是 AppleWebKit 引擎，它是一个开源的浏览器引擎，类似于 Gecko 引擎。</li>\n<li>Chrome/118.0.0.0 Safari/537.36：表示代理服务器使用的浏览器版本。这里表示代理服务器使用的是 Chrome 浏览器版本 118.0.0.0，以及 Safari 浏览器版本 537.36。</li>\n<li>Edg/118.0.2088.61：表示代理服务器使用的 Edge 浏览器版本。这里表示代理服务器使用的是 Edge 浏览器版本 118.0.2088.61。</li>\n</ul>\n<ol start=\"2\">\n<li>Cookie</li>\n</ol>\n<p>cookie，有时也用其复数形式 Cookies。类型为 “<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行 Session 跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 。具体信息见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DT09LSUUvMTExOQ==\"> cookies 百度百科</span>。</p>\n<p><a href=\"/2023/10/24/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/\" style=\"display: block;text-align: right;\">转到 Python 网络爬虫（二）</a></p>\n",
            "tags": [
                "Python",
                "爬虫"
            ]
        }
    ]
}