{
    "version": "https://jsonfeed.org/version/1",
    "title": "碎念随风",
    "description": "人海未见之时，我亦独行在这城市。 料峭，春醒，酷暑，骤雨，寒意四起，大雁南飞，而后，大雪，寒风， 斗转星移，人间寒暑。",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/05/30/BaiduSyncdisk/markdown/hello-world/",
            "url": "http://example.com/2024/05/30/BaiduSyncdisk/markdown/hello-world/",
            "title": "Hello World",
            "date_published": "2024-05-30T04:06:49.644Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/05/23/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E7%9A%84%E7%AA%97%E5%8F%A3/",
            "url": "http://example.com/2024/05/23/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E7%9A%84%E7%AA%97%E5%8F%A3/",
            "title": "Flink的窗口",
            "date_published": "2024-05-23T02:36:44.000Z",
            "content_html": "<h4 id=\"一-为什么需要窗口\"><a class=\"markdownIt-Anchor\" href=\"#一-为什么需要窗口\">#</a> 一、为什么需要窗口？</h4>\n<p>在 Flink 中，流是一个无界数据集，当我们需要在流中进行一些聚合运算时，比如统计最近 30 秒的请求量或者异常次数，然后根据请求或者异常次数采取相应措施。无论是从时间还是空间上，在流中做聚合计算都不现实。所以必须将聚合计算回归到有界数据集上，因此 Flink 引入了窗口来作为框定一个有限数据集，窗口将流拆分成有限大小的 “桶”，允许开发者在这些桶中做聚合计算。Flink 的窗口可以是时间驱动（Time Window），也可以是事件驱动 (Event Window)。</p>\n<h4 id=\"二-基本概念\"><a class=\"markdownIt-Anchor\" href=\"#二-基本概念\">#</a> 二、 基本概念</h4>\n<p>窗口化的流处理程序一般有两种结构，第一种结构是基于分组的窗口化数据流，第二种结构基于非分组的窗口化数据流。这两种结构的唯一区别是分组的数据流调用 KeyBy 操作符和 Window 操作符，而非分组的窗口化数据流仅调用 WindowAll 操作符。</p>\n<h4 id=\"三-window分组windowall非分组对比\"><a class=\"markdownIt-Anchor\" href=\"#三-window分组windowall非分组对比\">#</a> 三、 Window（分组），WindowAll（非分组）对比</h4>\n<ol>\n<li><strong>Window：</strong>  将在已经分区的 KeyedStream 中定义一个窗口，窗口根据某些特征将具有相同 key 的数据分为一组，（例如最近 5 秒到达的数据）。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stream</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 根据指定的key将数据流中的数据进行分区</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>                   <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 必选：“窗口分配器”</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“窗口触发器”（默认使用各窗口分配器内置的触发器实现）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">evictor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“窗口剔除器”（默认没有实现）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">allowedLateness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“窗口接受迟到的元素的最大时间”（默认为<span class=\"token number\">0</span>）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">sideOutputLateData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“侧端输出标签”</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>将窗口中迟到的数据发送到给定的<span class=\"token class-name\">OutPutTag</span>标识的侧端输出，默认窗口中迟到元素没有侧端输出<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span>reduce<span class=\"token operator\">/</span>aggregate<span class=\"token operator\">/</span>fold<span class=\"token operator\">/</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 必选：“窗口函数”</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSideOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>             <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“侧端输出”</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>使用给定的<span class=\"token class-name\">OutputTag</span>获取一个<span class=\"token class-name\">DataStream</span>，其中包含操作符发送到侧端输出的元素<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>WindowAll：</strong> 在常规的 DataStream 中调用 WIndowAll 操作符来定义一个窗口，窗口会根据某些特征对所有流数据进行分组。注：在大部分情况下使用 WIndowAll 操作符并不是并行转换，所有上游操作符发送的元素都将被收集在 WindowAll 操作符的任务中。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">stream</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span></span>WindowAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 必选：“窗口分配器”</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“窗口触发器”（默认使用各窗口分配器内置的触发器实现）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">evictor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“窗口剔除器”（默认没有实现）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">allowedLateness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“窗口接受迟到的元素的最大时间”（默认为<span class=\"token number\">0</span>）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">sideOutputLateData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“侧端输出标签”</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>将窗口中迟到的数据发送到给定的<span class=\"token class-name\">OutPutTag</span>标识的侧端输出，默认窗口中迟到元素没有侧端输出<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span>reduce<span class=\"token operator\">/</span>aggregate<span class=\"token operator\">/</span>fold<span class=\"token operator\">/</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 必选：“窗口函数”</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSideOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>             <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 可选：“侧端输出”</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>使用给定的<span class=\"token class-name\">OutputTag</span>获取一个<span class=\"token class-name\">DataStream</span>，其中包含操作符发送到侧端输出的元素<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"四-窗口的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#四-窗口的生命周期\">#</a> 四、 窗口的生命周期</h4>\n<p>在数据流中定义好一个窗口后，当属于某个窗口的第一元素到达时，该窗口就会创建，当时间（事件时间或处理时间）超过该窗口的结束时间戳加用户指定的允许延迟时间的总和后，该窗口将被完全删除。此外每个窗口都带有一个 trigger（触发器）和一个窗口函数 ProcessWindowFunction、ReduceFunction、AggregateFunction 等。窗口函数包含要应用于窗口中元素的计算逻辑，而触发器则是确定窗口何时该被窗口函数处理。触发的策略可能类似于 “当元素超过 4 个” 或者 “当水印经过窗口末端” 等。</p>\n<p>初此之外，Flink 还允许开发者指定一个 Evictor，它能够在触发器触发之后，窗口函数应用于窗口之前和 / 或之后从窗口中删除某些元素。</p>\n<h4 id=\"五-窗口分配器\"><a class=\"markdownIt-Anchor\" href=\"#五-窗口分配器\">#</a> 五、 窗口分配器</h4>\n<ol>\n<li>\n<p><strong>作用：</strong> 窗口分配器负责将每个传入的元素按照某种方式分配给一个或多个窗口。Flink 为最常见的几种应用场景（滚动窗口，滑动窗口，会话窗口，全局窗口）提供了预定义的以简化流处理程序的开发。还可以实现 windowAssigner 抽象类实现自定义窗口分配器。<br><font color=\"red\">注：所有预定义的窗口分配器除了全局窗口可以基于数据驱动的（根据元素数量来划分窗口），其它类型的窗口都是基于时间驱动的（窗口有一个开始时间戳（包括），和一个结束时间戳（不包括），共同描述窗口的大小）。这个时间可以是处理时间，也可以是事件时间。</font></p>\n</li>\n<li>\n<p><strong>分类：</strong></p>\n<ol>\n<li>滚动窗口（Tumbling Window）: 将每个元素分配给指定<em>窗口大小</em>的窗口。 滚动窗口具有固定大小，不重叠。</li>\n</ol>\n<p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEB541f48889a10adf9f3032f3d0e926546?method=download&amp;shareKey=45840225aaf794b9e53e1e9f61ef4e04\" alt=\"滚动窗口（官网截图）\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DataStream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// tumbling event-time windows</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TumblingEventTimeWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// tumbling processing-time windows</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TumblingProcessingTimeWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// daily tumbling event-time windows offset by -8 hours.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TumblingEventTimeWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">days</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">hours</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例代码参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW5neWFubGVpL0ZsaW5rLWRlbW8vYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9jb20vc2h5bC93aW5kb3cvVHVtYmxpbmdXaW5kb3cuamF2YQ==\"> github 地址</span></p>\n<ol start=\"2\">\n<li>滑动窗口（Sliding Window）: 将元素分配给固定长度的窗口，窗口的大小由 TIme 配置。除此之外，滑动窗口分配器还提供一个参数用于控制滑动窗口的滑动间隙如果滑动窗口的大小小于滑动间隙，则滑动窗口可能会重叠。</li>\n</ol>\n<p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEB99b6c5a9a2016dd99149bccfa73be1a3?method=download&amp;shareKey=dda4994966ef5c308b371fe338e01f28\" alt=\"滑动窗口(官网截图)\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DataStream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// sliding event-time windows</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SlidingEventTimeWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// sliding processing-time windows</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SlidingProcessingTimeWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// sliding processing-time windows offset by -8 hours</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SlidingProcessingTimeWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">hours</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">hours</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">hours</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>源码：第一次启动的窗口大小</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TimeWindow</span><span class=\"token punctuation\">></span></span> windows <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">/</span> slide<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例代码参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW5neWFubGVpL0ZsaW5rLWRlbW8vYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9jb20vc2h5bC93aW5kb3cvU2xpZGluZ1dpbmRvdy5qYXZh\"> github 地址</span></p>\n<ol start=\"3\">\n<li>会话窗口（Session Window）：会话窗口分配器根据活动的会话对元素进行分组，与滚动窗口和滑动窗口相反，会话窗口既不会重叠，也没有固定的开始时间和结束时间。当会话窗口在一段时间内没有收到元素时，他就会关闭。会话窗口分配器既可以配置静态间隙，也可以通过会话间隙提取器函数来配置动态会话间隙。</li>\n</ol>\n<p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEB0f96c93e39bd90b3e06560e4e7c5172e?method=download&amp;shareKey=e81c3788e7db5aa0252200082778abf8\" alt=\"会话窗口（官网截图）\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DataStream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// event-time session windows with static gap</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventTimeSessionWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">withGap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">minutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// event-time session windows with dynamic gap</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventTimeSessionWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">withDynamicGap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// determine and return session gap</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// processing-time session windows with static gap</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessingTimeSessionWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">withGap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Time</span><span class=\"token punctuation\">.</span><span class=\"token function\">minutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// processing-time session windows with dynamic gap</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessingTimeSessionWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">withDynamicGap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// determine and return session gap</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例代码参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW5neWFubGVpL0ZsaW5rLWRlbW8vYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9jb20vc2h5bC93aW5kb3cvU2Vzc2lvbldpbmRvdy5qYXZh\"> github 地址</span></p>\n<ol start=\"4\">\n<li>全局窗口（Global Window)：Flink 中的窗口既可以是时间驱动的，也可以是事件驱动的。全局窗口就是被事件驱动的（这里不太准确，你可以实现自定义的触发器支持时间）全局窗口分配器将具有相同 key 的所有元素分配给一个全局窗口。要使全局窗口模式可用，还必须为该窗口指定触发器，否则触发器不执行任何计算，这是因为全局窗口没有可以处理聚合元素的自然终点。例如指定一个大小为 3 个元素的窗口，每当窗口中的元素达到 3 个就会开启一个新的窗口。</li>\n</ol>\n<p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEBaa23b8a0d4d83796122798ba80b61a89?method=download&amp;shareKey=e81c3788e7db5aa0252200082778abf8\" alt=\"全局窗口（官网截图）\"></p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DataStream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>input</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>key selector<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalWindows</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>windowed transformation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>window function<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例代码参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW5neWFubGVpL0ZsaW5rLWRlbW8vYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9jb20vc2h5bC93aW5kb3cvR2xvYmFsV2luZG93LmphdmE=\"> github 地址</span></p>\n<h4 id=\"六-窗口函数\"><a class=\"markdownIt-Anchor\" href=\"#六-窗口函数\">#</a> 六、窗口函数</h4>\n<p>在窗口分配器生成窗口后，需要为每个窗口指定在该窗口中执行的计算策略。这就是窗口函数的职责。一旦系统确定一个窗口以准备好进行处理，窗口函数将用于处理每个（也可能是键控）的窗口中的每个元素。</p>\n<ol>\n<li>\n<p><strong>RecuceFunction</strong></p>\n<ol>\n<li><strong>作用：</strong>  reduce 操作符应用于用户定义的 ReduceFunction 窗口函数将一个窗口内的元素组合为单个值，而且总是将两个元素合并为一个元素，具体细节为将上一个合并过的值和当前输入的元素结合，产生新的值并发出。ReduceFunction 窗口函数会连续应用于同一个窗口内的所有值，知道仅剩一个值为止。</li>\n<li><strong>数据流转换：</strong>  WindowedStream -&gt; DataStream /AllWindowedStream -&gt; DataStream</li>\n<li><strong>应用场景：</strong></li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>windowedStream<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReduceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<h5 id=\"flodfunction当前版本删除\"><a class=\"markdownIt-Anchor\" href=\"#flodfunction当前版本删除\">#</a> FlodFunction：(当前版本删除)</h5>\n<ol>\n<li><strong>作用：</strong> 将用户定义的 FlodFuction 窗口函数指定如何将窗口的输入元素与输出类型的元素进行组合，添加到窗口的第一个元素将与输出类型的预定义的初始值进行组合。用户定义 FlodFunction 窗口函数的核心逻辑是将输入值和当前输出类型的值组合为一个指定输出类型的值。FlodFunction 窗口函数会连续应用于同一个窗口内的所有值，知道仅剩一个值为止。</li>\n<li>** 数据流转换：**WindowedStream -&gt; DataStream /AllWindowedStream -&gt; DataStream</li>\n<li><strong>应用场景：</strong></li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>windowedStream<span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span> initialValue<span class=\"token punctuation\">,</span><span class=\"token class-name\">FoldFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<h5 id=\"aggregatefunction\"><a class=\"markdownIt-Anchor\" href=\"#aggregatefunction\">#</a> AggregateFunction：</h5>\n<ol>\n<li><strong>作用：</strong> 应用用户定义的 AggregateFunction 窗口函数对窗口内的元素进行聚合计算。AggregateFunction 是 ReduceFunction 的广义版本，它有三种类型：输入类型（汇总值的类型，IN)、累加器类型（中间聚合状态 ACC）和输出类型（汇总结果的类型，OUT），相比 ReduceFunction 窗口函数，AggregateFunction 窗口函数可以为聚合计算的输入值，中间聚合值，和结果值使用不同的类型，以支持更广泛的聚合类型。为了简化开发者对于 AggregateFunction 窗口函数的使用，提供了一些预定义的实现逻辑，可以对一个窗口内的元素进行求和，求最大值，最小值等。</li>\n<li>** 数据流转换：**WindowedStream -&gt; DataStream /AllWindowedStream -&gt; DataStream</li>\n<li><strong>应用场景：</strong></li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>windowStream<span class=\"token punctuation\">.</span><span class=\"token function\">aggregate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AggregateFunction</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>ACC<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>AggregateFunction 接口</strong>\n<ol>\n<li>ACC createAccumulator () : 该方法将创建一个新的累加器以执行一个新的聚合操作。除非通过 add（…）方法添加值，否则创建新的累加器通常没有意义，累加器时正在执行聚合操作中的状态。</li>\n<li>ACC add (IN value,ACC accumulator): 该方法将给定的输入值添加到给定的累加器中，并返回新的累加器值。</li>\n<li>OUT getResult (ACC accumulator): 该方法将从累加器中获取聚合的结果。</li>\n<li>ACC merge (ACC a,ACC b): 该方法将合并两个累加器，返回一个具有合并状态的累加器。该方法可以重用任何给定的累加器作为合并的目标并返回。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<h5 id=\"processwindowfunctionprocessallwindowfunction\"><a class=\"markdownIt-Anchor\" href=\"#processwindowfunctionprocessallwindowfunction\">#</a> ProcessWindowFunction/ProcessAllWindowFunction</h5>\n<ol>\n<li><strong>作用：</strong> process 操作符应用用户定义的 ProcessWindowFunction 和 ProcessAllWindowFunction 窗口函数对窗口内的元素进行计算，这两个窗口函数会获取一个包含窗口所有元素的迭代器，以及一个可以访问窗口和状态信息的上下文对象，因此这两个窗口函数具有比其他窗口函数更大的灵活性。但是以消耗性能和资源为代价的，因为窗口内的元素不能增量的聚合，需要在内部进行缓冲，直到认为窗口已经准备好进行处理，所以当开发者使用这两个函数时需要充分考虑内存的占用情况。</li>\n<li>** 数据流转换：**WindowedStream -&gt; DataStream /AllWindowedStream -&gt; DataStream</li>\n<li><strong>应用场景：</strong></li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>windowedStream<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessWindowFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">W</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>类型参数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> – 输入值的类型。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> – 输出值的类型。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> – 密钥的类型。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">W</span><span class=\"token punctuation\">></span></span> – 可以应用此窗口函数的 <span class=\"token class-name\">Window</span> 类型。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">AllWindowedStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessAllWindowFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">W</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<h5 id=\"增量聚合的processwindowfunctionprocessallwindowfunction\"><a class=\"markdownIt-Anchor\" href=\"#增量聚合的processwindowfunctionprocessallwindowfunction\">#</a> 增量聚合的 ProcessWindowFunction/ProcessAllWindowFunction</h5>\n<ol>\n<li><strong>作用：</strong> ProcessWindowFunction 或 ProcessAllWindowFunction 可以和 ReduceFunction、AggregateFunction、FoldFunction 组合使用，以便在元素到达窗口时增量的聚合它们。当窗口关闭时，ProcessWindowFunction 或 ProcessAllWindowFunction 将提供聚合的结果。这允许开发者在访问 ProcessWindowFunction 或 ProcessAllWindowFunction 提供的窗口元素据的同时可以对窗口内的元素进行增量的聚合计算。</li>\n<li>** 数据流转换：**WindowedStream -&gt; DataStream /AllWindowedStream -&gt; DataStream</li>\n<li><strong>应用场景：</strong></li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ReduceFunction</span> 和 <span class=\"token class-name\">ProcessWindowFunction</span>组合</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>windowedStream<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ReduceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> reduceFunction</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ProcessWindowFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">W</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">ReduceFunction</span> 和 <span class=\"token class-name\">ProcessAllWindowFunction</span>组合</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">AllWindowedStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ReduceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> reduceFunction</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ProcessAllWindowFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">W</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"七-窗口触发器\"><a class=\"markdownIt-Anchor\" href=\"#七-窗口触发器\">#</a> 七、窗口触发器</h4>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/05/17/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/flink%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93/",
            "url": "http://example.com/2024/05/17/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/flink%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93/",
            "title": "flink算子总结",
            "date_published": "2024-05-17T02:25:29.000Z",
            "content_html": "<p>前言： Flink 提供了丰富的算子来方便开发者处理各种应用场景。</p>\n<h4 id=\"一-基本转换类算子\"><a class=\"markdownIt-Anchor\" href=\"#一-基本转换类算子\">#</a> 一、基本转换类算子</h4>\n<ol>\n<li>\n<h5 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map：</h5>\n<ol>\n<li><strong>作用</strong>：将用户定义的 MapFunction 函数应用于数据流中的每个元素。数据流中的每个元素将作为输入元素进入用户定义的 MapFunction 函数，MapFunction 函数将对输入的元素进行转换并产生一个结果元素输出到新的数据流中。</li>\n<li>** 数据流转换：**DataStream -&gt; DataStream。</li>\n<li>** 应用场景：** 解析元素，转换数据类型。</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"flatmap\"><a class=\"markdownIt-Anchor\" href=\"#flatmap\">#</a> FlatMap：</h5>\n<ol>\n<li>** 作用：** 将用户定义的 FlatMapFunction 函数应用于数据流中的每一个元素，数据流中的每个元素将作为输入元素进入 FlatMapFunction 函数，FlatMapFunction 函数将对输入的元素进行转换并产生 0 个，1 个，或者多个结果元素输出到新的数据流中。</li>\n<li>** 数据流转换：**DataStream -&gt; DataStream。</li>\n<li>** 应用场景：** 拆分不需要的列表和数组。</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"filter\"><a class=\"markdownIt-Anchor\" href=\"#filter\">#</a> Filter：</h5>\n<ol>\n<li>** 作用：** 将用户定义的 FilterFunction 函数应用于数据流中的每个元素。数据流中的每个元素将作为输入元素进入 FilterFunction 函数，FilterFunction 函数对输入的元素进行判断来决定保留该元素还是丢弃该元素，返回 true 代表保留，返回 false 代表丢弃。</li>\n<li>** 数据流转换：**DataStream -&gt; DataStream。</li>\n<li>** 应用场景：** 数据去重</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"keyby\"><a class=\"markdownIt-Anchor\" href=\"#keyby\">#</a> KeyBy：</h5>\n<ol>\n<li>** 作用：**KeyBy 操作符的执行逻辑是将一个数据流分成不相交的流分区（分区数量和并行度一致），所有具有相同 Key 的元素都被分配到相同的流分区，在 keyby 操作符内部通过散列算法来划分元素到对应的流分区。</li>\n<li>** 数据流转换：**DataStream -&gt; KeyedStream。</li>\n<li>** 应用场景：** 聚合、状态管理、窗口操作</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"reduce\"><a class=\"markdownIt-Anchor\" href=\"#reduce\">#</a> Reduce：</h5>\n<ol>\n<li>** 作用：**Reduce 操作符应用用户定义的 ReduceFunction 函数将 KeyedStream 中具有相同 Key 元素合并为单个值，而且总是将两个元素合并为一个元素，具体细节为将上一个合并过的值和当前输入的元素结合，产生新的值发出。Reduce 操作符将 ReduceFunction 函数连续应用于同一个组的所有值，直到仅剩一个值为止。</li>\n<li>** 数据流转换：**KeyedStream -&gt; DataStream。</li>\n<li>** 应用场景：** 聚合计算</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n</ol>\n<h4 id=\"二-聚合算子\"><a class=\"markdownIt-Anchor\" href=\"#二-聚合算子\">#</a> 二、聚合算子</h4>\n<ol>\n<li>\n<h5 id=\"aggregations\"><a class=\"markdownIt-Anchor\" href=\"#aggregations\">#</a> aggregations</h5>\n<ol>\n<li>\n<p>** 作用：** 提供一系列内置的聚合逻辑，可以对 KeyStream 中具有相同 Key 的元素进行求和，求最大值或最小值等。提供两种方式对具有相同 key 的元素进行聚合计算。对于 POJO 类型的元素可以通过指定字段名称来指定聚合字段，对于元组类型的元素可以通过指定元素的索引来指定聚合字段。</p>\n</li>\n<li>\n<p>** 数据流转换：**KeyedStream-&gt; DataStream</p>\n</li>\n<li>\n<p><strong>分类：</strong></p>\n<ol>\n<li>**sum：** 返回同一个 Key 分组下指定字段的和。</li>\n<li>**min：** 返回同一个 key 分组下指定字段的最小值。</li>\n<li>**minby：** 返回同一个 key 分组下指定字段中具有最小值的元素。</li>\n<li>**max：** 返回同一个 key 分组下指定字段的最大值。</li>\n<li>**maxby：** 返回同一个 key 分组下指定字段中具有最大值的元素。</li>\n</ol>\n<p><font color=\"red\">注：类似关系型数据的 SQL 语法，Min 是取字段的最小值，MinBy 是取字段最小的一整行数据（max 同理）。</font></p>\n</li>\n<li>\n<p><strong>应用场景：</strong></p>\n</li>\n<li>\n<p><strong>代码示例：</strong></p>\n</li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n</ol>\n<h4 id=\"三-数据流操作算子\"><a class=\"markdownIt-Anchor\" href=\"#三-数据流操作算子\">#</a> 三、数据流操作算子</h4>\n<ol>\n<li>\n<h5 id=\"keyby前面介绍过\"><a class=\"markdownIt-Anchor\" href=\"#keyby前面介绍过\">#</a> keyBY（前面介绍过）</h5>\n</li>\n<li>\n<p><strong>Split 和 Select（后续版本删除，作者使用版本为 1.14）：</strong></p>\n<ol>\n<li>\n<p>** 作用：** 这两个操作符通常是组合使用的，Split 操作符根据用户定义的标准将数据流拆分为两个或者更多的数据流，Select 操作符根据用户定义的标准获取对应的数据流，以便在获取的数据流中执行后续的转换操作。</p>\n</li>\n<li>\n<p>** 数据流转换：**split：DataStream -&gt; SplitStream <br>                      select：SplitStream -&gt; DataStream</p>\n</li>\n<li>\n<p>** 应用场景：** 切分数据流，获取数据流</p>\n</li>\n<li>\n<p><strong>代码示例：</strong></p>\n</li>\n</ol>\n<pre><code class=\"language-java\">   \n</code></pre>\n</li>\n<li>\n<h5 id=\"project\"><a class=\"markdownIt-Anchor\" href=\"#project\">#</a> Project</h5>\n<ol>\n<li>** 作用：**Project 操作符作用在元素的数据类型是元组的数据流中，它根据指定的索引从元组中选择对应的字段组成一个子集。该操作符的参数是一个变长参数，类型为 Int。参数指定保留的输入元组的字段索引，输出元组的字段顺序与字段索引的顺序相对应。</li>\n<li>** 数据流转换：**DataStream -&gt;DataStream</li>\n<li>** 应用场景：** 按元组索引创建新流</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"union\"><a class=\"markdownIt-Anchor\" href=\"#union\">#</a> Union</h5>\n<ol>\n<li>** 作用：**Union 操作符负责将两个或者多个<font color=\"red\">相同类型的数据流</font>进行合并来创建一个包含数据流中所有元素的新数据流。该操作符的参数是一个变长参数，可以支持合并多个相同类型的数据流.</li>\n<li>** 数据流转换：**DataStream -&gt; DataStream</li>\n<li>** 应用场景：** 合并不同数据源相同数据类型的数据流</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"connect\"><a class=\"markdownIt-Anchor\" href=\"#connect\">#</a> Connect</h5>\n<ol>\n<li>** 作用：** 连接两个保留其类型的数据流创建新的连接流，从而允许这两个数据流共享状态。</li>\n<li>** 数据流转化：**DataStream+DataStream -&gt; ConnectedStream</li>\n<li><strong>应用场景：</strong></li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"comapcoflatmap\"><a class=\"markdownIt-Anchor\" href=\"#comapcoflatmap\">#</a> CoMap,CoFlatMap</h5>\n<ol>\n<li><strong>作用：</strong>\n<ol>\n<li>CoMap：在 connectStream 中使用 Map 操作符将用户定义的 CoMapFunction 函数应用于 ConnectedStream 中的每个元素。数据流中的每个元素将作为输入元素进入 CoMapFunction 函数，对输入的元素进行转换并产生一个结果元素输出到新的数据流中。CoMapFunction 函数提供了 map1，map2 两种转换方式分别处理 connectStream 的两个不同类型的数据流。</li>\n<li>CoFlatMap：在 connectStream 中使用 FlatMap 操作符将用户定义的 CoFlatMapFunction 函数应用于 ConnectedStream 中的每个元素。数据流中的每个元素将作为输入元素进入 CoMapFunction 函数，对输入的元素进行转换并产生 0 个，1 个，或多个结果元素输出到新的数据流中。CoFlatMapFunction 函数提供了 flatmap1，flatmap2 两种转换方式分别处理 connectStream 的两个不同类型的数据流。</li>\n</ol>\n</li>\n<li>** 数据流转换：**ConnectedStream -&gt; DataStream</li>\n<li><strong>应用场景：</strong></li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n<li>\n<h5 id=\"iterate\"><a class=\"markdownIt-Anchor\" href=\"#iterate\">#</a> Iterate</h5>\n<ol>\n<li>** 作用：** 流处理程序的迭代计算实现了一个 Step 函数并将其嵌入 IterativeStream 类型的数据流，由于流处理程序可能永远不会完成，所以没有最大迭代次数。相反需要开发者指定数据流的那一部分被反馈回迭代操作中，以及那一部分使用 split 操作符或 filter 操作符转发到下游数据流。迭代操作将一个操作符的输出重定向到某个先前的操作符，在数据流中创建 “反馈” 循环。</li>\n<li>** 数据流转换：**DataStream -&gt; IterativeStream -&gt;DataStream</li>\n<li>** 应用场景：** 更新模型算法</li>\n<li><strong>代码示例：</strong></li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n</li>\n</ol>\n<h4 id=\"四-窗口算子\"><a class=\"markdownIt-Anchor\" href=\"#四-窗口算子\">#</a> 四、窗口算子</h4>\n<p>有关窗口的介绍请参考文章<a href=\"\" style=\"display: inline;white-space: nowrap;\">Flink 的窗口</a></p>\n<h5 id=\"6代码示例\"><a class=\"markdownIt-Anchor\" href=\"#6代码示例\">#</a> 6. 代码示例</h5>\n<ol>\n<li>自定义数据源 (1 秒发送一条数据)</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shyl<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>tuple<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Tuple3</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SourceFunction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SourceForWindow</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SourceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple3</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> <span class=\"token constant\">LOG</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SourceForWindow</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> isRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 发送元素间隔时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sleepTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">WORDS</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token string\">\"shyl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token string\">\"shyl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token string\">\"shyl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token string\">\"shyl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token string\">\"shyl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token string\">\"flink\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token string\">\"flink\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token string\">\"flink\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string\">\"shyl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string\">\"shyl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token string\">\"hadoop\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token string\">\"hadoop\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token string\">\"spark\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SourceForWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> sleepTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sleepTime <span class=\"token operator\">=</span> sleepTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SourceContext</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple3</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>isRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">String</span> word <span class=\"token operator\">=</span> <span class=\"token constant\">WORDS</span><span class=\"token punctuation\">[</span>count <span class=\"token operator\">%</span> <span class=\"token constant\">WORDS</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">String</span> time <span class=\"token operator\">=</span> <span class=\"token function\">getHHmmss</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">Tuple3</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tuple2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Tuple3</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>tuple2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token constant\">LOG</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send data :\"</span> <span class=\"token operator\">+</span> tuple2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>sleepTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        isRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getHHmmss</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"时间:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEB784f05b36e6fdd6006e67f3f701aa53b?method=download&amp;shareKey=07beb93234958c59db0138ad9d34bbdf\" alt=\"数据源截图\"></p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<hr>\n<p class=\"note note-primary\">富函数:是Flink的高级操作符，将RichFunction接口成为富函数。所有的操作符上应用的函数都有富函数版本，只需要在各种函数类名前面加上Rich前缀即可。富函数在基本函数提供的操作方法之外额外提供了一系列方法方便开发者丰富自己的业务逻辑。<br>\n1.🔴void open():执行基本操作方法前的初始化方法，它在基本的操作方法第一次被调用之前调用，因此适合在方法中进行编写初始化资源等一次性设置工作。该方法可能会转发运行时捕获的异常，当运行时捕获异常时，它将中止任务，并根据指定的重启策略决定是否重试任务。<br>\n2.🔴void close():在最后一次调用基本的操作方法之后调用它，换句话说就是在Flink程序结束前被调用，主要用于释放程序中的资源，该方法也可能转发运行时捕获的异常。<br>\n3.🔴RuntimeContext getRuntimeContext():获取有关用户定义的函数运行时的上下文信息，例如函数的并行度，函数的子任务索引或者执行函数的任务名称。RuntimeContext还提供对累加器，分布式缓存，计数器，当前配置信息，<font color='red'>状态</font>等对象的访问。<br>\n4.IterationRuntimeContext getIterationRuntimeContext():获取RuntimeContext的专用版本，该版本具有有关执行函数迭代的其他信息。仅当函数是迭代的一部分时，此IterationRuntimeContext才可用，否则调用此方法将引发异常。<br>\n5.void setRuntimeContext(RuntimeContext t):设置函数运行时的上下文，将用户定义的函数应用于操作符的并行实例时由Flink框架自动调用。</p>\n",
            "tags": [
                "大数据",
                "Flink"
            ]
        },
        {
            "id": "http://example.com/2024/03/07/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/%E5%AE%9E%E6%97%B6%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA/",
            "url": "http://example.com/2024/03/07/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/%E5%AE%9E%E6%97%B6%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA/",
            "title": "实时数仓搭建",
            "date_published": "2024-03-07T05:52:09.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2023/12/14/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E7%9A%84%E4%B8%8D%E5%90%8Csource/",
            "url": "http://example.com/2023/12/14/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E7%9A%84%E4%B8%8D%E5%90%8Csource/",
            "title": "Flink的不同source",
            "date_published": "2023-12-14T07:31:33.000Z",
            "content_html": "<ol>\n<li><strong>Elements</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingleOutputStreamOperator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> elements <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        env<span class=\"token punctuation\">.</span><span class=\"token function\">setParallelism</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> listSource <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">fromElements</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> listSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">+</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        env<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from_Elements\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>TextFile</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shyl<span class=\"token punctuation\">.</span>source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FlatMapFunction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>tuple<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Tuple2</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingleOutputStreamOperator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collector</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TextFile</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">createLocalEnvironmentWithWebUI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> source <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">readTextFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F:\\\\BigData\\\\Flink1.4\\\\input\\\\1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParallelism</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple2</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> flatmap <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FlatMapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Tuple2</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple2</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> collector<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> key <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">:</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    collector<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tuple2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple2</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> sum <span class=\"token operator\">=</span> flatmap<span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        sum<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        env<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextFile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>socket</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shyl<span class=\"token punctuation\">.</span>source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapFunction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>tuple<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Tuple2</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingleOutputStreamOperator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> socket <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> source <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">socketTextStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.52.201\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tuple2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        env<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>kafka</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shyl<span class=\"token punctuation\">.</span>source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>eventtime<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WatermarkStrategy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapFunction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>tuple<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Tuple2</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>tuple<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Tuple3</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingleOutputStreamOperator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>connectors<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FlinkKafkaConsumer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>connectors<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FlinkKafkaConsumerBase</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleStringSchema</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Duration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> kafka <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//        创建 kafka 数据源的配置</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"192.168.52.201:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        properties<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group_id\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kafka_source\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 指定消费者读取的位置</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">FlinkKafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlinkKafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">setStartFromEarliest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 尽可能从最早的记录开始</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//        consumer.setStartFromLatest ();       // 从最新的记录开始</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//        consumer.setStartFromTimestamp (); // 从指定的时间开始（毫秒）</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        consumer.setStartFromGroupOffsets (); // 默认的方法 从 Kafka brokers 中的 consumer 组（consumer 属性中的 group.id 设置）提交的偏移量中开始读取分区。 如果找不到分区的偏移量，那么将会使用配置中的 auto.offset.reset 设置。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> kafkasource <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span>consumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> kafkasource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tuple2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        env<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kafka_source\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>jdbc</strong>：flink 没有对 mysql 直接提供支持 ，需要自定义数据源。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shyl<span class=\"token punctuation\">.</span>source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RichParallelSourceFunction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCSourceFromMysql</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RichParallelSourceFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>base_dic<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configuration</span> parameters<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connection <span class=\"token operator\">=</span> <span class=\"token function\">getConnetion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from base_dic\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ps <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRuntimeContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJobId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SourceContext</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>base_dic<span class=\"token punctuation\">></span></span> sourceContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            base_dic basedic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">base_dic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            basedic<span class=\"token punctuation\">.</span><span class=\"token function\">setDic_code</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dic_code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            basedic<span class=\"token punctuation\">.</span><span class=\"token function\">setDic_name</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dic_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            basedic<span class=\"token punctuation\">.</span><span class=\"token function\">setParent_code</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent_code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            basedic<span class=\"token punctuation\">.</span><span class=\"token function\">setCreate_time</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create_time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            basedic<span class=\"token punctuation\">.</span><span class=\"token function\">setOperate_time</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"operate_time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            sourceContext<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>basedic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnetion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">String</span> driver <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://192.168.52.201:3306/gmall\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"1234kxmall!@#ABC\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">Connection</span> con <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                con <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> con<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t<strong>basc_inc 类</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shyl<span class=\"token punctuation\">.</span>source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> base_dic <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dic_code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dic_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> parent_code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> create_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> operate_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">base_dic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDic_code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> dic_code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDic_code</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dic_code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dic_code <span class=\"token operator\">=</span> dic_code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDic_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> dic_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDic_name</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dic_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dic_name <span class=\"token operator\">=</span> dic_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getParent_code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> parent_code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParent_code</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> parent_code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent_code <span class=\"token operator\">=</span> parent_code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCreate_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> create_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCreate_time</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> create_time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>create_time <span class=\"token operator\">=</span> create_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getOperate_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> operate_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setOperate_time</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> operate_time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operate_time <span class=\"token operator\">=</span> operate_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"base_inc&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token string\">\"dic_code='\"</span> <span class=\"token operator\">+</span> dic_code <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token string\">\", dic_name='\"</span> <span class=\"token operator\">+</span> dic_name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token string\">\", parent_code='\"</span> <span class=\"token operator\">+</span> parent_code <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token string\">\", create_time='\"</span> <span class=\"token operator\">+</span> create_time <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token string\">\", operate_time='\"</span> <span class=\"token operator\">+</span> operate_time <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t<strong>jdbcSource</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shyl<span class=\"token punctuation\">.</span>source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapFunction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataStreamSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>datastream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingleOutputStreamOperator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamExecutionEnvironment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBC</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        env<span class=\"token punctuation\">.</span><span class=\"token function\">setParallelism</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>base_dic<span class=\"token punctuation\">></span></span> mysqlSource <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JDBCSourceFromMysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">SingleOutputStreamOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> mysqlSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>base_dic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>base_dic value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        env<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_source\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"备注\"><a class=\"markdownIt-Anchor\" href=\"#备注\">#</a> 备注</h3>\n<p>以 flink1.4.4 版本为例，以下是 pom 文件</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-clients --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-clients_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.14.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-streaming-java --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-streaming-java_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.14.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;scope>provided&lt;/scope>--></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>slf4j-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.7.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-runtime-web --></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-runtime-web_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.14.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;scope>test&lt;/scope>--></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-connector-kafka_2.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.14.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-connector-jdbc --></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-connector-jdbc_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.14.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;scope>provided&lt;/scope>--></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j --></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.31<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "大数据",
                "Flink"
            ]
        },
        {
            "id": "http://example.com/2023/12/06/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E5%AD%A6%E4%B9%A0-%E4%B8%80/",
            "url": "http://example.com/2023/12/06/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E5%AD%A6%E4%B9%A0-%E4%B8%80/",
            "title": "Flink学习(一)",
            "date_published": "2023-12-06T03:36:08.000Z",
            "content_html": "<h3 id=\"一-flink相关名词解析\"><a class=\"markdownIt-Anchor\" href=\"#一-flink相关名词解析\">#</a> 一、Flink 相关名词解析</h3>\n<ol>\n<li>DataStream API</li>\n<li>DataSet API</li>\n<li></li>\n</ol>\n<h3 id=\"二-flink程序剖析\"><a class=\"markdownIt-Anchor\" href=\"#二-flink程序剖析\">#</a> 二、FLink 程序剖析</h3>\n<p>Flink 程序看起来像是转换的常规程序。每程序由相同的基本部分组成： <code>DataStreams</code></p>\n<ol>\n<li>获取执行环境 ， <code>execution environment</code></li>\n<li>加载 / 创建初始数据，</li>\n<li>指定此数据的转换，</li>\n<li>指定计算结果的放置位置，</li>\n<li>触发程序执行</li>\n</ol>\n<p><em>执行环境方法：</em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">createLocalEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">createRemoteEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> jarFiles<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><em>数据源：</em></p>\n<p>基于文件：</p>\n<ul>\n<li>\n<p><code>readTextFile(path)</code> - 逐行读取文本文件，即遵守规范的文件，并将它们作为字符串返回。``</p>\n</li>\n<li>\n<p><code>readFile(fileInputFormat, path)</code> - 根据指定的文件输入格式读取（一次）文件。</p>\n</li>\n<li>\n<p><code>readFile(fileInputFormat, path, watchType, interval, pathFilter, typeInfo)</code> - 这是前两个方法内部调用的方法。它根据给定的。根据所提供的 ，该源可以定期监视（每毫秒）新数据的路径（），或者处理当前路径中的数据并退出（）。使用 ，用户可以进一步排除正在处理的文件。``</p>\n<p><em>实现：</em></p>\n<p>在底层，Flink 将文件读取过程拆分为两个子任务，即<em>目录监控</em>和<em>数据读取</em>。这些子任务中的每一个都由一个单独的实体实现。监视由单个非并行（<strong>并行度</strong> = 1）任务实现，而读取由并行运行的多个任务执行。后者的并行度等于作业并行度。单个监控任务的作用是扫描目录（定期或仅扫描一次，具体取决于目录），找到需要处理的文件，将其<em>拆分</em>，并将这些拆分分配给下游读取器。读者是读取实际数据的人。每个拆分只能由一个读取器读取，而一个读取器可以逐个读取多个拆分。</p>\n<p><em>重要提示：</em></p>\n<ol>\n<li>如果 设置为 ，则在修改文件时，将完全重新处理其内容。这可能会破坏 “恰好一次” 的语义，因为在文件末尾附加数据将导致重新处理其<strong>所有</strong>内容。</li>\n<li>如果 设置为 ，则源扫描<strong>路径一次</strong>并退出，而无需等待读取器完成对文件内容的读取。当然，读者将继续阅读，直到读取所有文件内容。关闭源会导致在此点之后不再有检查点。这可能会导致节点故障后的恢复速度变慢，因为作业将从最后一个检查点恢复读取。</li>\n</ol>\n</li>\n</ul>\n<p>基于套接字：</p>\n<ul>\n<li><code>socketTextStream</code> - 从套接字读取。元素可以用分隔符分隔。</li>\n</ul>\n<p>基于集合：</p>\n<ul>\n<li><code>fromCollection(Collection)</code> - 从 Java Java.util.Collection 创建数据流。所有元素 在集合中必须属于同一类型。</li>\n<li><code>fromCollection(Iterator, Class)</code> - 从迭代器创建数据流。该类指定 迭代器返回的元素的数据类型。</li>\n<li><code>fromElements(T ...)</code> - 从给定的对象序列创建数据流。所有对象都必须是 相同类型。</li>\n<li><code>fromParallelCollection(SplittableIterator, Class)</code> - 从迭代器创建数据流，在 平行。该类指定迭代器返回的元素的数据类型。</li>\n<li><code>generateSequence(from, to)</code> - 在给定的时间间隔内生成数字序列，在 平行。</li>\n</ul>\n<p>习惯：</p>\n<ul>\n<li><code>addSource</code> - 附加新的源函数【或者自定义数据源】。例如，要从 Apache Kafka 读取数据，可以使用。有关更多详细信息<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC9kb2NzL2Nvbm5lY3RvcnMvZGF0YXN0cmVhbS9vdmVydmlldy8=\">，请参阅连接器</span>。 <code>addSource(new FlinkKafkaConsumer&lt;&gt;(...))</code></li>\n</ul>\n<p><em>transfrom 算子</em></p>\n<p>有关可用流转换的概述，请参阅<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC9kb2NzL2Rldi9kYXRhc3RyZWFtL29wZXJhdG9ycy9vdmVydmlldy8=\">运算符</span>。</p>\n<p><em>数据接收器</em></p>\n<p>Flink 自带了多种内置的输出格式，这些格式封装在 数据流：</p>\n<ul>\n<li><code>writeAsText()</code>  /  <code>TextOutputFormat</code> - 将元素按行写入字符串。字符串是 通过调用每个元素的 <em>toString（）</em> 方法获得。</li>\n<li><code>writeAsCsv(...)</code>  /  <code>CsvOutputFormat</code> - 将元组写入逗号分隔值文件。行和字段 分隔符是可配置的。每个字段的值来自对象的 <em>toString（）</em> 方法。</li>\n<li><code>print()</code>  /  <code>printToErr()</code> - 打印 <em>toString（）</em> 值 标准输出 / 标准误差流上的每个元素。或者，可以提供前缀 （msg），即 在输出之前。这有助于区分不同的<em>打印</em>调用。如果并行度为 大于 1，则输出还将在前面加上生成输出的任务的标识符。</li>\n<li><code>writeUsingOutputFormat()</code>  /  <code>FileOutputFormat</code> - 自定义文件输出的方法和基类。支持 自定义对象到字节的转换。</li>\n<li><code>writeToSocket</code> - 根据 <code>SerializationSchema</code></li>\n<li><code>addSink</code> - 调用自定义接收器函数。Flink 捆绑了其他系统的连接器（例如 Apache Kafka），作为接收器函数实现。</li>\n</ul>\n<h3 id=\"三-执行模式\"><a class=\"markdownIt-Anchor\" href=\"#三-执行模式\">#</a> 三、执行模式</h3>\n<p>DataStream API 支持不同的运行时执行模式，你可以根据你的用例需要和作业特点进行选择。</p>\n<p>DataStream API 有一种” 经典 “的执行行为，我们称之为 <code>流（STREAMING）</code> 执行模式。这种模式适用于需要连续增量处理，而且预计无限期保持在线的无边界作业。</p>\n<p>此外，还有一种批式执行模式，我们称之为 <code>批（BATCH）</code> 执行模式。这种执行作业的方式更容易让人联想到批处理框架，比如 MapReduce。这种执行模式适用于有一个已知的固定输入，而且不会连续运行的有边界作业。</p>\n<p>Apache Flink 对流处理和批处理统一方法，意味着无论配置何种执行模式，在有界输入上执行的 DataStream 应用都会产生相同的<em>最终</em> 结果。重要的是要注意<em>最终</em> 在这里是什么意思：一个在 <code>流</code> 模式执行的作业可能会产生增量更新（想想数据库中的插入（upsert）操作），而 <code>批</code> 作业只在最后产生一个最终结果。尽管计算方法不同，只要呈现方式得当，最终结果会是相同的。</p>\n<p>可以通过设置配置执行模式。 有三个可能的值： <code>execution.runtime-mode</code></p>\n<ul>\n<li><code>STREAMING</code> ：经典 DataStream 执行模式（默认）</li>\n<li><code>BATCH</code> ：在 DataStream API 上进行批处理式执行</li>\n<li><code>AUTOMATIC</code> ：让系统根据源的有界性来决定</li>\n</ul>\n<p>这可以通过命令行参数进行配置 ，或者 在创建 / 配置 . <code>bin/flink run ...``StreamExecutionEnvironment</code></p>\n<p>以下是通过命令行配置执行模式的方法：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ bin/flink run -Dexecution.runtime-mode<span class=\"token operator\">=</span>BATCH examples/streaming/WordCount.jar</pre></td></tr></table></figure><p>此示例演示如何在代码中配置执行模式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>env<span class=\"token punctuation\">.</span><span class=\"token function\">setRuntimeMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeExecutionMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BATCH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>我们建议用户<strong>不要</strong>在程序中设置运行时模式，而是 提交应用程序时使用命令行进行设置。保持 无需配置应用程序代码，即可实现更大的灵活性 应用程序可以在任何执行模式下执行。</p>\n</blockquote>\n<h3 id=\"四-执行行为\"><a class=\"markdownIt-Anchor\" href=\"#四-执行行为\">#</a> 四、执行行为</h3>\n<h3 id=\"五-任务调度与网络-shuffle\"><a class=\"markdownIt-Anchor\" href=\"#五-任务调度与网络-shuffle\">#</a> 五、任务调度与网络 Shuffle</h3>\n<p>Flink 作业由不同的操作组成，这些操作在数据流图中连接在一起。系统决定如何在不同的进程 / 机器（TaskManager）上调度这些操作的执行，以及如何在它们之间 shuffle （发送）数据。</p>\n<p>将多个操作 / 算子链接在一起的功能称为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2Rldi9kYXRhc3RyZWFtL29wZXJhdG9ycy9vdmVydmlldy8jdGFzay1jaGFpbmluZy1hbmQtcmVzb3VyY2UtZ3JvdXBz\">链</span>。Flink 称一个调度单位的一组或多个（链接在一起的）算子为一个 <em>任务</em>。通常，<em>子任务</em> 用来指代在多个 TaskManager 上并行运行的单个任务实例，但我们在这里只使用 <em>任务</em> (task) 一词。</p>\n<p>任务调度和网络 shuffle 对于 <code>批</code> 和 <code>流</code> 执行模式的执行方式不同。这主要是由于在 <code>批</code> 执行模式中，当知道输入数据是有边界的时候，<strong>Flink 可以使用更高效的数据结构和算法</strong>。</p>\n<p>我们将用这个例子来解释任务调度和网络传输的差异。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StreamExecutionEnvironment</span> env <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamExecutionEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">DataStreamSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> source <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">fromElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>source<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">rebalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map5\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">sinkTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>包含 1-to-1 连接模式的操作，比如  <code>map()</code> 、  <code>flatMap()</code>  或  <code>filter()</code> ，可以直接将数据转发到下一个操作，这使得这些操作可以被链接在一起。这意味着 Flink 一般不会在他们之间插入网络 shuffle。</p>\n<p>而像  <code>keyBy()</code>  或者  <code>rebalance()</code>  这样需要在不同的任务并行实例之间进行数据 shuffle 的操作，就会引起网络 shuffle。</p>\n<p>对于上面的例子，Flink 会将操作分组为这些任务:</p>\n<ul>\n<li>任务 1:  <code>source</code> 、  <code>map1</code>  和  <code>map2</code></li>\n<li>任务 2:  <code>map3</code>  和  <code>map4</code></li>\n<li>任务 3:  <code>map5</code>  、  <code>map6</code>  和  <code>sink</code></li>\n</ul>\n<p>我们在任务 1 到任务 2、任务 2 到任务 3 之间各有一次网络 shuffle。这是该作业的可视化表示：</p>\n<img data-src=\"https://note.youdao.com/yws/api/personal/file/WEBdf4ba0a0f59f9b2a5218765dd5a35cfe?method=download&shareKey=e2599a9aa2a3734364c539c15ae47a50\">\n<h4 id=\"流执行模式\"><a class=\"markdownIt-Anchor\" href=\"#流执行模式\">#</a> 流执行模式</h4>\n<p>在 <code>流</code> 执行模式下，所有任务需要一直在线 / 运行。这使得 Flink 可以通过整个管道立即处理新的记录，以达到我们需要的连续和低延迟的流处理。这同样意味着分配给某个作业的 TaskManagers 需要有足够的资源来同时运行所有的任务。</p>\n<p>网络 shuffle 是 <em>流水线</em> 式的，这意味着记录会立即发送给下游任务，在网络层上进行一些缓冲。同样，这也是必须的，因为当处理连续的数据流时，在任务（或任务管道）之间没有可以实体化的自然数据点（时间点）。这与 <code>批</code> 执行模式形成了鲜明的对比，在 <code>批</code> 执行模式下，中间的结果可以被实体化，如下所述。</p>\n<h4 id=\"批执行模式\"><a class=\"markdownIt-Anchor\" href=\"#批执行模式\">#</a> 批执行模式</h4>\n<p>在 <code>批</code> 执行模式下，一个作业的任务可以被分离成可以一个接一个执行的阶段。我们之所以能做到这一点，是因为输入是有边界的，因此 Flink 可以在进入下一个阶段之前完全处理管道中的一个阶段。在上面的例子中，工作会有三个阶段，对应着被 shuffle 界线分开的三个任务。</p>\n<p>不同于上文所介绍的 <code>流</code> 模式立即向下游任务发送记录，分阶段处理要求 Flink 将任务的中间结果实体化到一些非永久存储中，让下游任务在上游任务已经下线后再读取。这将增加处理的延迟，但也会带来其他有趣的特性。<strong>其一，这允许 Flink 在故障发生时回溯到最新的可用结果，而不是重新启动整个任务。其二， <code>批</code> 作业可以在更少的资源上执行（就 TaskManagers 的可用槽而言），因为系统可以一个接一个地顺序执行任务。</strong></p>\n<blockquote>\n<p>TaskManagers 将至少在下游任务开始消费它们前保留中间结果（从技术上讲，它们将被保留到消费的<em>流水线区域</em>产生它们的输出为止）。在这之后，只要空间允许，它们就会被保留，以便在失败的情况下，可以回溯到前面涉及的结果。</p>\n</blockquote>\n<h3 id=\"六-事件时间\"><a class=\"markdownIt-Anchor\" href=\"#六-事件时间\">#</a> 六、事件时间</h3>\n<ul>\n<li>\n<p>** 处理时间：** 处理时间是指机器的系统时间，即执行相应的操作的时间。</p>\n<p>当流式处理程序在处理时间上运行时，所有基于时间的操作 （如时间窗口）将使用运行各自的运算符。每小时的处理时间窗口将包括所有 在系统到达特定操作员的时间之间的记录 时钟显示整点。例如，如果应用程序开始运行 上午 9：15，第一个每小时处理时间窗口将包括事件 在上午 9：15 至上午 10：00 之间处理，下一个窗口将包含事件 在上午 10：00 至上午 11：00 之间处理，依此类推。</p>\n<p>处理时间是最简单的时间概念，不需要协调 在流和计算机之间。它提供了最佳性能和 最低延迟。但是，在分布式和异步环境中 处理时间不提供确定性，因为它容易受到 记录到达系统的速度（例如，从消息 queue），以记录在 系统，以及中断（计划或其他方式）。</p>\n</li>\n<li>\n<p>** 事件时间：** 事件时间是每个事件发生的时间 其生产装置。此时间通常嵌入在记录中 在他们进入 Flink 之前，可以从中提取<em>该事件时间戳</em> 每条记录。在事件时间中，时间的进展取决于数据，而不是 任何挂钟。事件时间程序必须指定如何生成<em>事件时间 水印</em>，这是在事件时间中发出进度信号的机制。这 水印机制将在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2NvbmNlcHRzL3RpbWUvI2V2ZW50LXRpbWUtYW5kLXdhdGVybWFya3M=\">后面</span>的部分中介绍。</p>\n<p>在理想情况下，事件时间处理将产生完全一致的结果 和确定性结果，无论事件何时到达，或者其 订购。但是，除非已知事件按顺序到达（通过 timestamp），事件时间处理在等待时会产生一些延迟 乱序事件。由于只能等待有限的时间，这限制了事件时间应用程序的确定性。</p>\n<p>假设所有数据都已到达，则事件时间操作将表现为 预期，即使在使用 无序或延迟事件，或重新处理历史数据时。例如 每小时事件时间窗口将包含承载事件的所有记录 落入该小时的时间戳，无论它们的顺序如何 到达，或当它们被处理时。</p>\n</li>\n<li>\n<p><strong>摄取时间：</strong></p>\n</li>\n</ul>\n",
            "tags": [
                "大数据",
                "Flink"
            ]
        },
        {
            "id": "http://example.com/2023/12/01/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "url": "http://example.com/2023/12/01/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Flink/Flink%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "title": "Flink的搭建",
            "date_published": "2023-12-01T01:33:02.000Z",
            "content_html": "<h3 id=\"一-集群规划\"><a class=\"markdownIt-Anchor\" href=\"#一-集群规划\">#</a> 一、集群规划</h3>\n<table>\n<thead>\n<tr>\n<th>nodev2001</th>\n<th>nodev2002</th>\n<th>nodev2003</th>\n<th>nodev2004</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td>worker</td>\n<td>worker</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xOC96aC9kb2NzL2RlcGxveW1lbnQvamF2YV9jb21wYXRpYmlsaXR5Lw==\">适配的 java 版本</span></strong></p>\n<h3 id=\"二-安装流程\"><a class=\"markdownIt-Anchor\" href=\"#二-安装流程\">#</a> 二、安装流程</h3>\n<p>前往 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mbGluay5hcGFjaGUub3JnL3poL2Rvd25sb2Fkcy5odG1s\">下载页面</span> 获取可运行的软件包。</p>\n<p>在下载完最新的发布版本后，复制压缩文件到 master 节点并解压：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> xzf flink-1.14.0-bin-scala_2.12.tgz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> flink-1.14.0-bin-scala_2.12.tgz /opt/module</pre></td></tr></table></figure><p>配置 Flink：</p>\n<p>在解压完文件后，编辑 <em>conf/flink-conf.yaml</em> 文件来为集群配置 Flink。</p>\n<ol>\n<li>\n<p>设置  <code>jobmanager.rpc.address</code>  配置项指向 master 节点</p>\n</li>\n<li>\n<p>设置  <code>jobmanager.memory.process.size</code>  和  <code>taskmanager.memory.process.size</code>  配置项来定义 Flink 允许在每个节点上分配的最大内存值。</p>\n</li>\n<li>\n<p>如果 worker 节点上有你想分配到 Flink 系统的多余内存，你可以在这些特定节点的 <em>conf/flink-conf.yaml</em> 文件中重写  <code>taskmanager.memory.process.size</code>  或  <code>taskmanager.memory.flink.size</code>  的默认值。s</p>\n</li>\n<li>\n<p>编辑文件 <em>conf/masters</em> 并输入 master 节点的 IP 或主机名。</p>\n</li>\n<li>\n<p>编辑文件 <em>conf/workers</em> 并输入每个 worker 节点的 IP 或主机名。</p>\n</li>\n<li>\n<p>Flink 目录复制到每个 worker 节点上。</p>\n</li>\n<li>\n<p><strong>参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2RlcGxveW1lbnQvY29uZmlnLw==\">配置参数页面</span> 获取更多细节以及额外的配置项。</strong></p>\n</li>\n<li>\n<p>特别地，</p>\n<ul>\n<li>每个 JobManager 的可用内存值（ <code>jobmanager.memory.process.size</code> ），</li>\n<li>每个 TaskManager 的可用内存值 （ <code>taskmanager.memory.process.size</code> ，并检查 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2RlcGxveW1lbnQvbWVtb3J5L21lbV90dW5pbmcvI2NvbmZpZ3VyZS1tZW1vcnktZm9yLXN0YW5kYWxvbmUtZGVwbG95bWVudA==\">内存调优指南</span>），</li>\n<li>每台机器的可用 CPU 数（ <code>taskmanager.numberOfTaskSlots</code> ），</li>\n<li>集群中所有 CPU 数（ <code>parallelism.default</code> ）和</li>\n<li>临时目录（ <code>io.tmp.dirs</code> ）</li>\n</ul>\n<p>的值都是非常重要的配置项。</p>\n</li>\n</ol>\n<h3 id=\"三-启动flink集群\"><a class=\"markdownIt-Anchor\" href=\"#三-启动flink集群\">#</a> 三、启动 Flink 集群</h3>\n<ol>\n<li>本地节点启动了一个 JobManager 并通过 SSH 连接到 <em>workers</em> 文件中所有的 worker 节点，master 节点的 flink 目录下</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bin/start-cluster.sh</pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>关闭 Flink，这里同样有一个  <code>stop-cluster.sh</code>  脚本。</p>\n</li>\n<li>\n<p>为集群添加 JobManager<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>/TaskManager<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup> 实例</p>\n<p><strong>添加 JobManager</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bin/jobmanager.sh <span class=\"token punctuation\">((</span>start<span class=\"token operator\">|</span>start-foreground<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>webui-port<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>stop-all</pre></td></tr></table></figure><p><strong>添加 TaskManager</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bin/taskmanager.sh start<span class=\"token operator\">|</span>start-foreground<span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>stop-all</pre></td></tr></table></figure><p>确保在你想启动 / 关闭相应实例的主机上执行这些脚本。</p>\n</li>\n</ol>\n<h3 id=\"四-使用yarn管理集群\"><a class=\"markdownIt-Anchor\" href=\"#四-使用yarn管理集群\">#</a> 四、使用 Yarn 管理集群</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC9kb2NzL2RlcGxveW1lbnQvb3ZlcnZpZXcvI2FwcGxpY2F0aW9uLW1vZGU=\">Flink 的 3 种部署模式</span></p>\n<ol>\n<li>应用程序模式：</li>\n<li>作业模式：<em>Per-Job</em> 模式使用可用的资源提供程序 框架（例如 YARN、Kubernetes）为每个提交的作业启动一个集群。此群集可用于 只有那份工作。作业完成后，群集将被拆除，任何延迟的资源（文件等）都会被拆除 清除了。</li>\n<li>会话模式：多个 flink Application 向同一个 JobManager 提交，相互之间竞争资源；好处：不需要重复的启动集群。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>部署模式</th>\n<th>启动集群</th>\n<th>资源隔离</th>\n<th>JM 数量</th>\n<th>应用程序的方法</th>\n<th>适合情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用程序模式</td>\n<td>1 次</td>\n<td>隔离</td>\n<td>1/per job</td>\n<td>jM</td>\n<td>【作业模式，会话模式折中】</td>\n</tr>\n<tr>\n<td>作业模式</td>\n<td>1/per job</td>\n<td>隔离</td>\n<td>1/per job</td>\n<td>client</td>\n<td>长时间运行的作业</td>\n</tr>\n<tr>\n<td>会话模式</td>\n<td>1 次</td>\n<td>不隔离</td>\n<td>1</td>\n<td>client</td>\n<td>低延迟，运行时间短</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"五-使用问题\"><a class=\"markdownIt-Anchor\" href=\"#五-使用问题\">#</a> 五、使用问题</h3>\n<ol>\n<li>会话模式，per-job 模式启动两个任务会失败</li>\n</ol>\n<h3 id=\"脚注\"><a class=\"markdownIt-Anchor\" href=\"#脚注\">#</a> 脚注</h3>\n<p><em>JobManager</em> 具有许多与协调 Flink 应用程序的分布式执行有关的职责：它决定何时调度下一个 task（或一组 task）、对完成的 task 或执行失败做出反应、协调 checkpoint、并且协调从失败中恢复等等。这个进程由三个不同的组件组成：</p>\n<ul>\n<li>\n<p><strong>ResourceManager</strong></p>\n<p><em>ResourceManager</em> 负责 Flink 集群中的资源提供、回收、分配 - 它管理 <strong>task slots</strong>，这是 Flink 集群中资源调度的单位（请参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2NvbmNlcHRzL2ZsaW5rLWFyY2hpdGVjdHVyZS8jdGFza21hbmFnZXJz\"> TaskManagers</span>）。Flink 为不同的环境和资源提供者（例如 YARN、Kubernetes 和 standalone 部署）实现了对应的 ResourceManager。在 standalone 设置中，ResourceManager 只能分配可用 TaskManager 的 slots，而不能自行启动新的 TaskManager。</p>\n</li>\n<li>\n<p><strong>Dispatcher</strong></p>\n<p><em>Dispatcher</em> 提供了一个 REST 接口，用来提交 Flink 应用程序执行，并为每个提交的作业启动一个新的 JobMaster。它还运行 Flink WebUI 用来提供作业执行信息。</p>\n</li>\n<li>\n<p><strong>JobMaster</strong></p>\n<p><em>JobMaster</em> 负责管理单个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2NvbmNlcHRzL2dsb3NzYXJ5LyNsb2dpY2FsLWdyYXBo\"> JobGraph</span> 的执行。Flink 集群中可以同时运行多个作业，每个作业都有自己的 JobMaster。</p>\n</li>\n</ul>\n<p>始终至少有一个 JobManager。高可用（HA）设置中可能有多个 JobManager，其中一个始终是 <em>leader</em>，其他的则是 <em>standby</em>（请参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2RlcGxveW1lbnQvaGEvb3ZlcnZpZXcv\">高可用（HA）</span>）。</p>\n<p><em>TaskManager</em>（也称为 <em>worker</em>）执行作业流的 task，并且缓存和交换数据流。</p>\n<p>必须始终至少有一个 TaskManager。在 TaskManager 中资源调度的最小单位是 task <em>slot</em>。TaskManager 中 task slot 的数量表示并发处理 task 的数量。请注意一个 task slot 中可以执行多个算子（请参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWdodGxpZXMuYXBhY2hlLm9yZy9mbGluay9mbGluay1kb2NzLXJlbGVhc2UtMS4xNC96aC9kb2NzL2NvbmNlcHRzL2ZsaW5rLWFyY2hpdGVjdHVyZS8jdGFza3MtYW5kLW9wZXJhdG9yLWNoYWlucw==\"> Tasks 和算子链</span>）。</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>JobManager <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>TaskManagers <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "大数据",
                "Flink"
            ]
        },
        {
            "id": "http://example.com/2023/11/16/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/hive3-13%E6%B7%BB%E5%8A%A0spark%E5%BC%95%E6%93%8E/",
            "url": "http://example.com/2023/11/16/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/hive3-13%E6%B7%BB%E5%8A%A0spark%E5%BC%95%E6%93%8E/",
            "title": "hive3.13添加spark引擎",
            "date_published": "2023-11-16T02:39:42.000Z",
            "content_html": "<p><em><strong>大数据架构 :lambda 架构，hsap 架构，流批一体</strong></em></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jd2lraS5hcGFjaGUub3JnL2NvbmZsdWVuY2UvZGlzcGxheS9IaXZlL0hpdmUrb24rU3BhcmslM0ErR2V0dGluZytTdGFydGVk\">Hive 官网关于 spark on hive</span></p>\n<h3 id=\"一-spark-on-hive-和-hive-on-spark-的区别和联系\"><a class=\"markdownIt-Anchor\" href=\"#一-spark-on-hive-和-hive-on-spark-的区别和联系\">#</a> 一、spark on hive 和 hive on spark 的区别和联系</h3>\n<p><em><strong>spark on hive</strong></em>：Spark on Hive 是 Hive 只作为存储角色，Spark 负责 sql 解析优化，执行</p>\n<p><em><strong>hive on spark：</strong></em></p>\n<h3 id=\"二-版本选择\"><a class=\"markdownIt-Anchor\" href=\"#二-版本选择\">#</a> 二、版本选择</h3>\n<h3 id=\"三-修改后运行时长对比\"><a class=\"markdownIt-Anchor\" href=\"#三-修改后运行时长对比\">#</a> 三、修改后运行时长对比</h3>\n",
            "tags": [
                "升级"
            ]
        },
        {
            "id": "http://example.com/2023/11/03/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/Hive%E4%B8%AD%E7%9A%84explode/",
            "url": "http://example.com/2023/11/03/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/Hive%E4%B8%AD%E7%9A%84explode/",
            "title": "Hive中的explode",
            "date_published": "2023-11-03T02:22:29.000Z",
            "content_html": "<h3 id=\"一-问题介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-问题介绍\">#</a> 一、问题介绍</h3>\n<p>在使用 explode 进行炸列操作时，发现炸列后有的行消失了。</p>\n<h3 id=\"二-模拟场景\"><a class=\"markdownIt-Anchor\" href=\"#二-模拟场景\">#</a> 二、模拟场景</h3>\n<pre><code class=\"language-hive\">建表语句\ndrop table test.shyl_explode_test;\ncreate table test.shyl_explode_test(\n    `id` string comment 'id',\n    `list` ARRAY&lt;string&gt; comment '列表'\n)comment'测试炸列函数所使用的字段为空时，该行数据如何处理'\nstored as orc;\n插入数据\nINSERT INTO TABLE shyl_explode_test VALUES\n  ('1', array('A', 'B', 'C')),\n  ('2', array('X', 'Y')),\n  ('3', array(&quot;&quot;))\n  ('4', null)\n  ('5', array(null));\n</code></pre>\n<p>当插入数据 (‘4’, null) 报错 <code>[42000][40000] Error while compiling statement: FAILED: SemanticException 0:0 Expected 2 columns for insclause-0/test@shyl_explode_test; select produces 1 columns. Error encountered near token 'TOK_NULL'</code></p>\n<p>大概的意思是说这个 list 字段的数据类型是 array，现在要插入一个 null 类型的，类型不匹配，</p>\n<p>但是在实际情况中，表中数据类型为 array，其值为 null 的情况不少见，比如我们是通过上传文件到 hdfs，再通过 hive 建表关联数据，得到的表【具体过程没有验证，不确定是是否可以创建成功】；执行连接操作时，没有关联上的使用 null 填充【未验证】; 或者只插入一个列的值，【本文就采取这种方式】，得到 list 字段为空的情况：</p>\n<pre><code class=\"language-HIVE\">INSERT INTO TABLE shyl_explode_test(id) VALUES ('4');\n</code></pre>\n<pre><code class=\"language-hive\">查看表中的数据\nselect * from test.shyl_explode_test;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:left\">list</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[“A”,“B”,“C”]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[“X”,“Y”]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[&quot;&quot;]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">[null]</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-hive\">现根据list字段为null，查询出指定数据\nselect * from test.shyl_explode_test where list is null;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>list</th>\n</tr>\n</thead>\n</table>\n<p>发现数据为空，原因可能与字段类型为 array 有关</p>\n<p>现提供一个其它的方式查询</p>\n<pre><code class=\"language-hive\">因为size(map/array)返回 -1 作为特殊的值，通常表示一个无效或异常的情况，而不是实际的大小或长度,所以利用它来查询空值\nselect size(null);\n-1\nselect * from test.shyl_explode_test where size(list)=-1;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:left\">list</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n</tbody>\n</table>\n<p>有关 sql 中的 null 参考此文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84MjQzNDAyNA==\">原文地址</span></p>\n<h3 id=\"三-执行explode\"><a class=\"markdownIt-Anchor\" href=\"#三-执行explode\">#</a> 三、执行 explode</h3>\n<pre><code>select * from test.shyl_explode_test\nlateral view explode(list)t1 as a;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:left\">list</th>\n<th style=\"text-align:left\">a</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[“A”,“B”,“C”]</td>\n<td style=\"text-align:left\">A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[“A”,“B”,“C”]</td>\n<td style=\"text-align:left\">B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[“A”,“B”,“C”]</td>\n<td style=\"text-align:left\">C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[“X”,“Y”]</td>\n<td style=\"text-align:left\">X</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[“X”,“Y”]</td>\n<td style=\"text-align:left\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[&quot;&quot;]</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">[null]</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n</tbody>\n</table>\n<p>我们发现 id 为 4 的那一行数据缺失，现在是有两列，当我的列数多，且其它列的数据重要时，会发生丢失一些重要数据的情况。</p>\n<p>所以在执行 explode 的时候添加一些保护机制，附上一些不影响结果的默认值。</p>\n<pre><code class=\"language-hive\">select * from test.shyl_explode_test\nlateral view explode(nvl(list,array(NULL)))t1 as a;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:left\">list</th>\n<th style=\"text-align:left\">a</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[“A”,“B”,“C”]</td>\n<td style=\"text-align:left\">A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[“A”,“B”,“C”]</td>\n<td style=\"text-align:left\">B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[“A”,“B”,“C”]</td>\n<td style=\"text-align:left\">C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[“X”,“Y”]</td>\n<td style=\"text-align:left\">X</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[“X”,“Y”]</td>\n<td style=\"text-align:left\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[&quot;&quot;]</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><font style=\"color:red\">4</font></td>\n<td style=\"text-align:left\"><font style=\"color:red\">null</font></td>\n<td style=\"text-align:left\"><font style=\"color:red\">null</font></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">[null]</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四-explodelateral-view源码剖析\"><a class=\"markdownIt-Anchor\" href=\"#四-explodelateral-view源码剖析\">#</a> 四、explode+lateral view 源码剖析</h3>\n<p>【目前不会看源码】，之后有能力补上，从结果反推，像是炸列后执行的 inner join。</p>\n",
            "tags": [
                "Bug"
            ]
        },
        {
            "id": "http://example.com/2023/11/03/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/Hive%E4%B8%AD%E7%9A%84Struct%E7%B1%BB%E5%9E%8BBug/",
            "url": "http://example.com/2023/11/03/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/Hive%E4%B8%AD%E7%9A%84Struct%E7%B1%BB%E5%9E%8BBug/",
            "title": "Hive中的Struct类型Bug",
            "date_published": "2023-11-03T02:21:17.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc3N1ZXMuYXBhY2hlLm9yZy9qaXJhL2Jyb3dzZS9ISVZFLTIxNzc4\">原文地址</span></p>\n<h3 id=\"一-hive的struct类型介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-hive的struct类型介绍\">#</a> 一、hive 的 Struct 类型介绍</h3>\n<p>Struct 是 Hive 复杂数据类型的一种 ，声明方式  <code>STRUCT&lt;col_name : data_type [COMMENT col_comment], ...&gt;</code></p>\n<h3 id=\"二-cbo介绍\"><a class=\"markdownIt-Anchor\" href=\"#二-cbo介绍\">#</a> 二、CBO 介绍</h3>\n<h3 id=\"三-解决方式\"><a class=\"markdownIt-Anchor\" href=\"#三-解决方式\">#</a> 三、解决方式</h3>\n",
            "tags": [
                "Bug"
            ]
        },
        {
            "id": "http://example.com/2023/10/24/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Python/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "http://example.com/2023/10/24/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Python/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "Python网络爬虫（二）",
            "date_published": "2023-10-24T07:34:44.000Z",
            "content_html": "<h3 id=\"一-request库\"><a class=\"markdownIt-Anchor\" href=\"#一-request库\">#</a> 一、request 库</h3>\n<p>Requests 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。这是官方的文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXF1ZXN0cy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3Qv\">request 官方文档</span>（官方文档不太容易看懂😹）可以选择菜鸟教程里面的 requests 库讲解<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9weXRob24zL3B5dGhvbi1yZXF1ZXN0cy5odG1s\">菜鸟教程</span>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性或方法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">apparent_encoding</td>\n<td style=\"text-align:left\">编码方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">close()</td>\n<td style=\"text-align:left\">关闭与服务器的连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">content</td>\n<td style=\"text-align:left\">返回响应的内容，以字节为单位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cookies</td>\n<td style=\"text-align:left\">返回一个 CookieJar 对象，包含了从服务器发回的 cookie</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">elapsed</td>\n<td style=\"text-align:left\">返回一个 timedelta 对象，包含了从发送请求到响应到达之间经过的时间量，可以用于测试响应速度。比如 r.elapsed.microseconds 表示响应到达需要多少微秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">encoding</td>\n<td style=\"text-align:left\">解码 r.text 的编码方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">headers</td>\n<td style=\"text-align:left\">返回响应头，字典格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">history</td>\n<td style=\"text-align:left\">返回包含请求历史的响应对象列表（url）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">is_permanent_redirect</td>\n<td style=\"text-align:left\">如果响应是永久重定向的 url，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">is_redirect</td>\n<td style=\"text-align:left\">如果响应被重定向，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iter_content()</td>\n<td style=\"text-align:left\">迭代响应</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iter_lines()</td>\n<td style=\"text-align:left\">迭代响应的行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">json()</td>\n<td style=\"text-align:left\">返回结果的 JSON 对象 (结果需要以 JSON 格式编写的，否则会引发错误)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">links</td>\n<td style=\"text-align:left\">返回响应的解析头链接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">next</td>\n<td style=\"text-align:left\">返回重定向链中下一个请求的 PreparedRequest 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ok</td>\n<td style=\"text-align:left\">检查 “status_code” 的值，如果小于 400，则返回 True，如果不小于 400，则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">raise_for_status()</td>\n<td style=\"text-align:left\">如果发生错误，方法返回一个 HTTPError 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reason</td>\n<td style=\"text-align:left\">响应状态的描述，比如 “Not Found” 或 “OK”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">request</td>\n<td style=\"text-align:left\">返回请求此响应的请求对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">status_code</td>\n<td style=\"text-align:left\">返回 http 的状态码，比如 404 和 200（200 是 OK，404 是 Not Found）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">返回响应的内容，unicode 类型数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">url</td>\n<td style=\"text-align:left\">返回响应的 URL</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"二-beautiful-soup库\"><a class=\"markdownIt-Anchor\" href=\"#二-beautiful-soup库\">#</a> 二、Beautiful soup 库</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZWF1dGlmdWxzb3VwLmNuLw==\">Beautiful Soup</span> 是一个可以从 HTML 或 XML 文件中提取数据的 Python 库。它能够通过你喜欢的转换器实现惯用的文档导航，查找，修改文档的方式.Beautiful Soup 会帮你节省数小时甚至数天的工作时间.</p>\n<p>下表列出了主要的解析器，以及它们的优缺点:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">解析器</th>\n<th style=\"text-align:left\">使用方法</th>\n<th style=\"text-align:left\">优势</th>\n<th style=\"text-align:left\">劣势</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Python 标准库</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td>\n<td style=\"text-align:left\">Python 的内置标准库执行速度适中文档容错能力强</td>\n<td style=\"text-align:left\">Python 2.7.3 or 3.2.2) 前 的版本中文档容错能力差</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml HTML 解析器</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td>\n<td style=\"text-align:left\">速度快文档容错能力强</td>\n<td style=\"text-align:left\">需要安装 C 语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml XML 解析器</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, [&quot;lxml-xml&quot;])``BeautifulSoup(markup, &quot;xml&quot;)</code></td>\n<td style=\"text-align:left\">速度快唯一支持 XML 的解析器</td>\n<td style=\"text-align:left\">需要安装 C 语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">html5lib</td>\n<td style=\"text-align:left\"><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td>\n<td style=\"text-align:left\">最好的容错性以浏览器的方式解析文档生成 HTML5 格式的文档</td>\n<td style=\"text-align:left\">速度慢不依赖外部扩展</td>\n</tr>\n</tbody>\n</table>\n<p>将一段文档传入 BeautifulSoup 的构造方法，就能得到一个文档的对象，可以传入一段字符串或一个文件句柄.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;html>data&lt;/html>\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"beautiful-soup的4种对象\"><a class=\"markdownIt-Anchor\" href=\"#beautiful-soup的4种对象\">#</a> Beautiful Soup 的 4 种对象</h4>\n<p>Beautiful Soup 将复杂 HTML 文档转换成一个复杂的树形结构，每个节点都是 Python 对象，所有对象可以归纳为 4 种:  <code>Tag</code>  ,  <code>NavigableString</code>  ,  <code>BeautifulSoup</code>  ,  <code>Comment</code>  .</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>html_doc <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;p class=\"title\">&lt;b>The Dormouse's story&lt;/b>&lt;/p></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;p class=\"story\">Once upon a time there were three little sisters; and their names were</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie&lt;/a>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie&lt;/a> and</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie&lt;/a>;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>and they lived at the bottom of a well.&lt;/p></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&lt;p class=\"story\">...&lt;/p></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p class=\"note note-danger\">以下代码块中  `#` 后面的内容一般代指输出结果</p>\n<ol>\n<li><em><strong>Tag</strong></em></li>\n</ol>\n<p><code>Tag</code>  对象与 XML 或 HTML 原生文档中的 tag 相同:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;b class=\"boldest\">Extremely bold&lt;/b>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tag <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.Tag'></span></pre></td></tr></table></figure><p><font style='color:red'>tag 中最重要的属性: name 和 attributes</font></p>\n<ul>\n<li>Name: 每个 tag 都有自己的名字，通过  <code>.name</code>  来获取:</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># a</span></pre></td></tr></table></figure><p>如果改变了 tag 的 name, 那将影响所有通过当前 Beautiful Soup 对象生成的 HTML 文档:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">'你好'</span> <span class=\"token comment\">#只会修改第一个 a 标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>你好<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#&lt; 你好 class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/ 你好 ></span></pre></td></tr></table></figure><ul>\n<li>Attributes: 一个 tag 可能有很多个属性. tag  <code>&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</code>  有一个 “class” 的属性，值为 “sister” .<font style='color:red'> tag 的属性的操作方法与字典相同；可以使用 <code>.attrs</code>  老获取全部属性 </font></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#['sister']</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># link1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>attrs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># &#123;'href': 'http://example.com/elsie', 'class': ['sister'], 'id': 'link1'&#125;</span></pre></td></tr></table></figure><p class=\"note note-primary\">tag的属性可以被添加,删除或修改.tag的属性操作方法与字典一样<br>以下方法 只针对遇到的第一个标签的属性</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#新增</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'增加'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\" insert=\"增加\">Elsie&lt;/a></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#删除</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">del</span> soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># &lt;a href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 修改</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'brother'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># &#123;'href': 'http://example.com/elsie', 'class': 'brother', 'id': 'link1'&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><em><strong>NavigableString</strong></em>（可以遍历的字符串）</li>\n</ol>\n<p>字符串常被包含在 tag 内.Beautiful Soup 用  <code>NavigableString</code>  类来包装 tag 中的字符串:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>string</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Elsie</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'bs4.element.NavigableString'</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p><font style='color:red'>tag 中包含的字符串不能编辑，但是可以被替换成其它的字符串，用 replace_with () 方法</font></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>replace_with<span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"> 你好 & lt;/a></span></pre></td></tr></table></figure><ol start=\"3\">\n<li><em><strong>BeautifulSoup</strong></em></li>\n</ol>\n<p><code>BeautifulSoup</code>  对象表示的是一个文档的全部内容。大部分时候，可以把它当作  <code>Tag</code>  对象，它支持 遍历文档树 和 搜索文档树中描述的大部分的方法。</p>\n<ol start=\"4\">\n<li><em><strong>comment</strong></em></li>\n</ol>\n<p><code>Tag</code>  ,  <code>NavigableString</code>  ,  <code>BeautifulSoup</code>  几乎覆盖了 html 和 xml 中的所有内容，但是还有一些特殊对象。容易让人担心的内容是文档的注释部分:</p>\n<ul>\n<li>Coment 对象是一个特殊类型的 NavigableString 对象。</li>\n<li>如果标签内部的内容是注释，例如： <code>&lt;!-- Elsie --&gt;</code> 。那么该 NavigableSring 对象会转换成 Comment 对象，并且会把注释符号去掉。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>markup <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b>&lt;!--Hey, buddy. Want to buy a used parser?-->&lt;/b>\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>markup<span class=\"token punctuation\">,</span><span class=\"token string\">'lxml'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>text<span class=\"token operator\">+</span><span class=\"token string\">'输出为空'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#输出为空</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>comment <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>string</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Hey, buddy. Want to buy a used parser?</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.Comment'></span></pre></td></tr></table></figure><h4 id=\"遍历文档树\"><a class=\"markdownIt-Anchor\" href=\"#遍历文档树\">#</a> 遍历文档树</h4>\n<ol>\n<li><em><strong>子结点</strong></em></li>\n</ol>\n<p>一个 Tag 可能包含多个字符串或其它的 Tag, 这些都是这个 Tag 的子节点.Beautiful Soup 提供了许多操作和遍历子节点的属性.</p>\n<p><font style=\"color:red\">注意: Beautiful Soup 中字符串节点不支持这些属性，因为字符串没有子节点</font></p>\n<ol start=\"2\">\n<li><em><strong>tag 的名字</strong></em></li>\n</ol>\n<p>操作文档树最简单的方法就是告诉它你想获取的 tag 的 name. 如果想获取 <head> 标签，只要用  <code>soup.head</code>  :</p>\n<pre><code class=\"language-Python\">soup.head\n# &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n\nsoup.title\n# &lt;title&gt;The Dormouse's story&lt;/title&gt;\n</code></pre>\n<p>这是个获取 tag 的小窍门，可以在文档树的 tag 中多次调用这个方法。下面的代码可以获取 <code>&lt;body&gt;</code>  标签中的第一个 <code>&lt;b&gt;</code>  标签:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># &lt;b>The Dormouse's story&lt;/b></span></pre></td></tr></table></figure><p class=\"note note-info\">Tip:通过点取属性的方式只能获得当前名字的第一个tag:</p>\n<p>如果想要得到所有的 <code>&lt;a&gt;</code>  标签，或是通过名字得到比一个 tag 更多的内容的时候，就需要用到 Searching the tree 中描述的方法，比如: find_all ()</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># [&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a>, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie&lt;/a>, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie&lt;/a>]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.ResultSet'></span></pre></td></tr></table></figure><ol start=\"3\">\n<li><em><strong>.contents 和 .children</strong></em></li>\n</ol>\n<p>tag 的  <code>.contents</code>  属性可以将 tag 的子节点以列表的方式输出:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>contents</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># ['\\n', &lt;p class=\"title\">&lt;b>The Dormouse's story&lt;/b>&lt;/p>, '\\n', &lt;p class=\"story\">Once upon a time there were three little sisters; and their names were &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a>, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie&lt;/a> and &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie&lt;/a>; and they lived at the bottom of a well.&lt;/p>, '\\n', &lt;p class=\"story\">...&lt;/p>, '\\n']</span></pre></td></tr></table></figure><p>通过 tag 的  <code>.children</code>  生成器，可以对 tag 的子节点进行循环:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># &lt;class 'list_iterator'> 迭代器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#                      &lt; 第一行数据为空 >    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.NavigableString</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#&lt;p class=\"title\">&lt;b>The Dormouse's story&lt;/b>&lt;/p></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#&lt;class 'bs4.element.Tag'></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># &lt;p class=\"story\">Once upon a time there were three little sisters; and their names were</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie&lt;/a>,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie&lt;/a> and</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie&lt;/a>;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># and they lived at the bottom of a well.&lt;/p></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># &lt;class 'bs4.element.Tag'></span></pre></td></tr></table></figure><ol start=\"4\">\n<li><em><strong>.descendants</strong></em></li>\n</ol>\n<p><code>.contents</code>  和  <code>.children</code>  属性仅包含 tag 的直接子节点。例如，<head>标签只有一个直接子节点<title></p>\n<pre><code>head_tag.contents\n# [&lt;title&gt;The Dormouse's story&lt;/title&gt;]\n</code></pre>\n<p>但是<title>标签也包含一个子节点：字符串 “The Dormouse’s story”, 这种情况下字符串 “The Dormouse’s story” 也属于<head>标签的子孙节点.  <code>.descendants</code>  属性可以对所有 tag 的子孙节点进行递归循环</p>\n",
            "tags": [
                "Python",
                "爬虫"
            ]
        },
        {
            "id": "http://example.com/2023/10/24/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Python/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%80/",
            "url": "http://example.com/2023/10/24/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/Python/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%80/",
            "title": "Python网络爬虫（一）",
            "date_published": "2023-10-24T01:21:16.000Z",
            "content_html": "<h3 id=\"一-爬虫简介\"><a class=\"markdownIt-Anchor\" href=\"#一-爬虫简介\">#</a> 一、爬虫简介</h3>\n<p>网络爬虫（又称为网页蜘蛛，网络机器人，在 FOAF 社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p>\n<h3 id=\"二-网站robots协议\"><a class=\"markdownIt-Anchor\" href=\"#二-网站robots协议\">#</a> 二、网站 robots 协议</h3>\n<p>robots 是搜索引擎爬虫协议，也就是你网站和爬虫的协议。</p>\n<p>** 简单的理解：**robots 是告诉搜索引擎，你可以爬取收录我的什么页面，你不可以爬取和收录我的那些页面。robots 很好的控制网站那些页面可以被爬取，那些页面不可以被爬取。</p>\n<p><strong>主流的搜索引擎都会遵守 robots 协议</strong>。并且 robots 协议是爬虫爬取网站第一个需要爬取的文件。爬虫爬取 robots 文件后，会读取上面的协议，并准守协议爬取网站，收录网站。</p>\n<p><strong>robots 文件是一个纯文本文件，也就是常见的.txt 文件</strong>。在这个文件中网站管理者可以声明该网站中不想被 robots 访问的部分，或者指定搜索引擎只收录指定的内容。因此，robots 的优化会直接影响到搜索引擎对网站的收录情况。</p>\n<h5 id=\"存放目录\"><a class=\"markdownIt-Anchor\" href=\"#存放目录\">#</a> 存放目录</h5>\n<p><strong>robots 文件必须要存放在网站的根目录下</strong>。也就是 域名 /robots.txt 是可以访问文件的。你们也可以尝试访问别人网站的 robots 文件。 输入域名 /robots.txt 即可访问。示例：知乎</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcm9ib3RzLnR4dA==\">知乎的 robots 文件</span></p>\n<h5 id=\"robots写作语法\"><a class=\"markdownIt-Anchor\" href=\"#robots写作语法\">#</a> robots 写作语法</h5>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User-agent: Googlebot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>User-agent: Googlebot-Image</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>User-agent: Baiduspider-news</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>User-agent: Baiduspider</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>User-agent: Baiduspider-render</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>User-agent: Baiduspider-image</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>User-agent: bingbot</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Disallow: /appview/</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Disallow: /login</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Disallow: /logout</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>Disallow: /resetpassword</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>Disallow: /terms</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>Disallow: /search</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>Allow: /search-special</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>Disallow: /notifications</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>Disallow: /settings</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>Disallow: /inbox</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>Disallow: /admin_inbox</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Disallow: /*?guide*</pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>User-Agent: *</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Disallow: /</pre></td></tr></table></figure><p>user-agent 这句代码表示那个搜索引擎准守协议。user-agent 后面为搜索机器人名称，如果是 “*” 号，则泛指所有的搜索引擎机器人；案例中显示 “User-agent: *” 表示所有搜索引擎准守，* 号表示所有。</p>\n<p>Disallow 是禁止爬取的意思。Disallow 后面是不允许访问文件目录（你可以理解为路径中包含改字符、都不会爬取）。案例中显示 “Disallow: /?s*” 表示路径中带有 “/?s” 的路径都不能爬取。 * 代表匹配所有。 这里需要主机。 Disallow 空格一个，/ 必须为开头。</p>\n<p>如果 “Disallow: /” 因为所有路径都包含 / ，所以这表示禁止爬取网站所有内容。</p>\n<p><font style=\"color:red\">如果没有被禁止到的路径，默认为可以被爬取。</font></p>\n<h5 id=\"关于robots的注意事项\"><a class=\"markdownIt-Anchor\" href=\"#关于robots的注意事项\">#</a> 关于 robots 的注意事项</h5>\n<ol>\n<li>\n<p>不要禁止爬虫爬取网站的所有，因为从经验来看，如果屏蔽一次，解封后好一段时间爬虫都不会来你网站，收录成为问题。</p>\n</li>\n<li>\n<p>代码后需要【冒号 + 空格 + 斜杆】 ，比如 “Disallow: /<em>?</em> ”</p>\n</li>\n<li>\n<p>当网站为静态路径时，需要屏蔽掉所有动态链接。网站中存在一种链接被收录即可，避免一个页面 2 个链接。代码如下 “Disallow: /<em>?</em> ” 表示禁止所有带？号的网址被爬取。通常动态网址带有 “?”“=” 等。</p>\n</li>\n<li>\n<p>根据自己网站情况定，屏蔽不需要收录的网址。</p>\n</li>\n</ol>\n<h3 id=\"三-爬虫语言的选择\"><a class=\"markdownIt-Anchor\" href=\"#三-爬虫语言的选择\">#</a> 三、爬虫语言的选择</h3>\n<p>很多人提到爬虫就会想到 Python，其实除了 Python，其他的语言诸如 C，PHP，Java 等等都可以写爬虫，而且一般来说这些语言的执行效率还要比 Python 要高，但为什么目前来说，Python 渐渐成为了写很多人写爬虫的第一选择，简单总结了以下几点：</p>\n<ul>\n<li>\n<p><em><strong>开发效率高</strong></em>，代码简洁，一行代码就可完成请求，100 行可以完成一个复杂的爬虫任务；</p>\n</li>\n<li>\n<p><em><strong>爬虫对于代码执行效率要求不高</strong></em>，网站 IO 才是最影响爬虫效率的。如一个网页请求可能需要 100ms，数据处理 10ms 还是 1ms 影响不大；</p>\n</li>\n<li>\n<p><em><strong>非常多优秀的第三方库</strong></em>，如 requests，beautifulsoup，selenium 等等；</p>\n</li>\n</ul>\n<h3 id=\"四-http请求类型\"><a class=\"markdownIt-Anchor\" href=\"#四-http请求类型\">#</a> 四、HTTP 请求类型</h3>\n<p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p>\n<p><strong>HTTP1.0 定义了三种请求方法</strong>： GET, POST 和 HEAD 方法。</p>\n<p><strong>HTTP1.1 新增了六种请求方法</strong>：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><strong>GET</strong></td>\n<td>请求指定的页面信息，并返回实体主体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEAD</td>\n<td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>POST</strong></td>\n<td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和 / 或已有资源的修改。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>PUT</td>\n<td>从客户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CONNECT</td>\n<td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>OPTIONS</td>\n<td>允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TRACE</td>\n<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n<tr>\n<td>9</td>\n<td>PATCH</td>\n<td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"五-http-状态码\"><a class=\"markdownIt-Anchor\" href=\"#五-http-状态码\">#</a> 五、HTTP 状态码</h3>\n<ul>\n<li>200 - 请求成功</li>\n<li>301 - 资源（网页等）被永久转移到其它 URL</li>\n<li>404 - 请求的资源（网页等）不存在</li>\n<li>500 - 内部服务器错误</li>\n</ul>\n<p><strong>所有的状态代码的取值一般在 100-599 之间，超出这个范围的响应状态码就不是标准的状态响应码了。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">所有的状态码</span>可以分成 5 类：</strong></p>\n<ul>\n<li>100–199：信息反馈（Informational responses）；</li>\n<li>200–299：成功反馈（Successful responses），上面的代码的 200 status code 就属于这里；</li>\n<li>300–399：重定向消息（Redirection messages）；</li>\n<li>400–499：客户端错误响应（Client error responses），这个区间包含了我们常见的 403 和 404 错误响应码</li>\n<li>500–599：服务器错误响应（Server error responses）</li>\n</ul>\n<h3 id=\"六-requests-中-get-与-post-的-headers-参数\"><a class=\"markdownIt-Anchor\" href=\"#六-requests-中-get-与-post-的-headers-参数\">#</a> 六、requests 中 get 与 post 的 headers 参数</h3>\n<p>在编写爬虫的过程中，有些网站会设置反爬机制，对不是来源于浏览器的访问进行拒绝，此时我们会收到 403 错误响应码，或者收到 “抱歉，无法访问 “等字眼，这就需要在爬虫程序中修改请求的 headers 伪装浏览器访问，从而绕开网站的反爬机制获取正确的页面。</p>\n<h5 id=\"1了解-requests-中-get-与-post-的-headers-参数\"><a class=\"markdownIt-Anchor\" href=\"#1了解-requests-中-get-与-post-的-headers-参数\">#</a> 1. 了解 requests 中 get 与 post 的 headers 参数</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \"headers\": &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"Accept\": \"*/*\", </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"Accept-Encoding\": \"gzip, deflate\", </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"Host\": \"httpbin.org\", </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"User-Agent\": \"python-requests/2.31.0\", </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"X-Amzn-Trace-Id\": \"Root=1-65373fd4-71bd6a663234e7c4749aa450\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure><p class=\"note note-success\">User-Agent: 用户代理（英语：User Agent）指的是代表用户行为的软件代理程序所提供的对自己的一个标识符。用于标识浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识</p>\n<p>我们直接用 request 包，上来就调用 get 或者 post 方法，对方的服务器会根据我们发送的 **“User-Agent”: “python-requests/2.31.0”** 了解到，你是用 python 调用的 request 包来访问他们的服务器的。由于这种行为仅仅是消耗服务器资源带来成本，但是不会给对方带来任何好处（搜索引擎的爬虫除外），所以有一些网站会加入反爬机制，通过识别 headers 来拒绝对你的请求进行响应。</p>\n<p><font style='color:red'>因此，我们需要在发送的请求中加入自定义的 headers，将我们的请求伪装成利用浏览器进行的请求。</font></p>\n<h5 id=\"2查看浏览器headers的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#2查看浏览器headers的常用方法\">#</a> 2. 查看浏览器 headers 的常用方法</h5>\n<p>在浏览器的网页上：F12 打开检查 ——&gt; Network ——&gt; Doc ——&gt; 在 Name 里找到对应的请求文件 ——&gt; 在右边选择标头 标签页，找到 “请求标头”，就可以看到我们发送给服务器的 headers。</p>\n<img data-src='https://note.youdao.com/yws/api/personal/file/WEB0ac4a14cf94a00e27fc74a8ca69b6de8?method=download&shareKey=5942d087f7e28642d8ef3cb59bc1b2e1'>\n<p>同理，服务器在发给我们信息的时候，也会发送 Headers。我们同样在上面的选择路径，可以看到 “Response Headers”。</p>\n<img data-src='https://note.youdao.com/yws/api/personal/file/WEBa24eee38235b2443609b6227b8e57e22?method=download&shareKey=23a40e0611844ba2d9c900dad3abcaf7'>\n<p>我们可以查看到服务器响应返回的头信息知道响应结果的编码是 utf-8，有的还可以看到服务器所用是 apache 或是其他 web 服务器。</p>\n<h5 id=\"3headers-的解读\"><a class=\"markdownIt-Anchor\" href=\"#3headers-的解读\">#</a> 3.Headers 的解读</h5>\n<ol>\n<li>User-Agent 的格式解读</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.61</pre></td></tr></table></figure><ul>\n<li>Mozilla/5.0 (WindowsNT 10.0; Win64; x64)：表示代理服务器的操作系统和版本。这里表示代理服务器是在 Windows 10 64 位操作系统上运行的。</li>\n<li>AppleWebKit/537.36 (KHTML, like Gecko)：表示代理服务器使用的浏览器引擎。这里表示代理服务器使用的是 AppleWebKit 引擎，它是一个开源的浏览器引擎，类似于 Gecko 引擎。</li>\n<li>Chrome/118.0.0.0 Safari/537.36：表示代理服务器使用的浏览器版本。这里表示代理服务器使用的是 Chrome 浏览器版本 118.0.0.0，以及 Safari 浏览器版本 537.36。</li>\n<li>Edg/118.0.2088.61：表示代理服务器使用的 Edge 浏览器版本。这里表示代理服务器使用的是 Edge 浏览器版本 118.0.2088.61。</li>\n</ul>\n<ol start=\"2\">\n<li>Cookie</li>\n</ol>\n<p>cookie，有时也用其复数形式 Cookies。类型为 “<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行 Session 跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 。具体信息见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DT09LSUUvMTExOQ==\"> cookies 百度百科</span>。</p>\n<p><a href=\"\" style=\"display: block;text-align: right;\">转到 Python 网络爬虫（二）</a></p>\n",
            "tags": [
                "Python",
                "爬虫"
            ]
        },
        {
            "id": "http://example.com/2023/10/19/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA%E7%9A%84%E6%95%B0%E6%8D%AE%E8%B7%A8%E5%A4%A9%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/10/19/BaiduSyncdisk/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/%E6%95%B0%E4%BB%93%E6%90%AD%E5%BB%BA%E7%9A%84%E6%95%B0%E6%8D%AE%E8%B7%A8%E5%A4%A9%E9%97%AE%E9%A2%98/",
            "title": "数仓搭建的数据跨天问题",
            "date_published": "2023-10-19T09:19:32.000Z",
            "content_html": "<h3 id=\"一-问题背景\"><a class=\"markdownIt-Anchor\" href=\"#一-问题背景\">#</a> 一、问题背景</h3>\n<p>在电商的离线数仓搭建中，进行 dwd 层订单域的设计中，普遍会出现订单数据跨天的情况，对于边界数据该如何处理。</p>\n<h3 id=\"二-业务背景\"><a class=\"markdownIt-Anchor\" href=\"#二-业务背景\">#</a> 二、业务背景</h3>\n<p>业务表的关系如下图所示：</p>\n<img data-src='https://note.youdao.com/yws/api/personal/file/WEBe8594c5b923fa1ad10c34399375740d0?method=download&shareKey=709a969272424f2a2da8e4550013b845'>\n<h5 id=\"举例说明\"><a class=\"markdownIt-Anchor\" href=\"#举例说明\">#</a> 举例说明：</h5>\n<p>​\t\t假设某用户在 2023-08-18 23:59 分下单，在 2023-08-19 0：01 完成支付。在业务系统的中数据的流转是：</p>\n<ol>\n<li>下单会在 order_info【订单信息表】,order_detail【订单详情表】，order_detail_coupon【订单明细优惠券关联表】,order_detail_activity【订单明细活动关联表】会新增一条订单相关数据。</li>\n<li>order_info【订单信息表】是一张状态表，数据发生变化，会 update 相关数据，比如订单状态【从未支付到已支付】而 order_detail【订单详情表】只记录了订单的详细信息，基本上都是维度信息，不会发生变动。</li>\n<li>我们搭建离线数仓中，增量数据同步使用的 maxwell，全量数据同步使用的是 datax，订单相关的表我们选择的是 maxwell，众所周知，maxwell 同步数据基本上分为两类，insert【新增的数据】和 update【更新的数据】。</li>\n<li>现想要制作一张用户下单成功的事务事实表，由于用户订单成功状态是在 19 日更新的，所以计算该条下单成功是在 19 日，而订单的详细信息是 18 日的时候插入订单详细表中的，在数仓中数据 18 日的分区。</li>\n<li>所以我们加工 19 日分区的下单成功表，需要关联的是 18 日，19 日的订单详情表。</li>\n<li>一般数仓的加工是 T+1, 所以 2023-08-20 计算 2023-08-19 的数据，插入 2023-08-19 分区。 内部需要关联 2023-08-18,2023-08-19 的数据。、</li>\n</ol>\n<h3 id=\"问题总结\"><a class=\"markdownIt-Anchor\" href=\"#问题总结\">#</a> 问题总结</h3>\n<p>数仓中的业务过程要仔细理解，根据表的更新逻辑，数据同步的方式，选择出合理的数据加工方式。</p>\n",
            "tags": [
                "总结",
                "数仓搭建"
            ]
        },
        {
            "id": "http://example.com/2023/10/13/BaiduSyncdisk/markdown/fluid%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "url": "http://example.com/2023/10/13/BaiduSyncdisk/markdown/fluid%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "title": "fluid使用指南",
            "date_published": "2023-10-13T07:17:59.000Z",
            "content_html": "<h3 id=\"1文章中使用主题内置的便签\"><a class=\"markdownIt-Anchor\" href=\"#1文章中使用主题内置的便签\">#</a> 1. 文章中使用主题内置的便签</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>note note-primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>使用效果图如下：</p>\n<p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEBaefe0d8151326e6297d0a1c2604201a5?method=download&amp;shareKey=e76161d555ba41618cd18f07fda59b2e\" alt=\"效果图\"></p>\n<h3 id=\"2文章中链接其它文章\"><a class=\"markdownIt-Anchor\" href=\"#2文章中链接其它文章\">#</a> 2. 文章中链接其它文章</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline<span class=\"token punctuation\">;</span><span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>转到【文章名】<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>示例：<a href=\"\" style=\"display: inline;white-space: nowrap;\">转到【md 语法】</a></p>\n<h3 id=\"3摘要的处理\"><a class=\"markdownIt-Anchor\" href=\"#3摘要的处理\">#</a> 3. 摘要的处理</h3>\n<p>手动指定摘要，使用  <code>&lt;!-- more --&gt;</code>  MD 文档里划分，如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>正文的一部分作为摘要</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- more --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>余下的正文</pre></td></tr></table></figure><p>或者在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZnJvbnQtbWF0dGVy\">front-matter (opens new window)</span> 里设置  <code>excerpt</code>  字段，如：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 这是标题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">excerpt</span><span class=\"token punctuation\">:</span> 这是摘要</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p class=\"note note-primary\">Tips:<br>\n    优先级: 手动摘要 > 自动摘要<br>\n    如果关闭自动摘要，并且没有设置手动摘要，摘要区域空白<br>\n    无论哪种摘要都最多显示 3 行，当屏幕宽度不足时会隐藏部分摘要。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/10/13/BaiduSyncdisk/markdown/%E6%B5%8B%E8%AF%95%E5%9B%BE%E5%BA%8A/",
            "url": "http://example.com/2023/10/13/BaiduSyncdisk/markdown/%E6%B5%8B%E8%AF%95%E5%9B%BE%E5%BA%8A/",
            "title": "测试图床",
            "date_published": "2023-10-13T03:12:37.000Z",
            "content_html": "<h3 id=\"一-b站图床不可用使用效果如下\"><a class=\"markdownIt-Anchor\" href=\"#一-b站图床不可用使用效果如下\">#</a> 一、B 站图床 (不可用，使用效果如下)</h3>\n<img data-src=\"https://article.biliimg.com/bfs/article/0edd9af11db1d637b88126fe896a7fb01339455642.png@1e_1c.webp\">\n<h3 id=\"二-有道云图床可用有些麻烦\"><a class=\"markdownIt-Anchor\" href=\"#二-有道云图床可用有些麻烦\">#</a> 二、有道云图床（可用，有些麻烦）</h3>\n<p>使用有道云图床可以通过以下步骤进行操作：</p>\n<ol>\n<li>\n<p>打开浏览器，访问有道云笔记的网页版或使用有道云笔记客户端。</p>\n</li>\n<li>\n<p>在有道云笔记中，找到并点击 “+” 按钮创建一个新的文件夹，将其命名为您便于识别的名称，例如 “图床”。</p>\n</li>\n<li>\n<p>在新创建的 “图床” 文件夹中，点击 “上传” 按钮，然后选择并上传您想要作为图片的本地文件。</p>\n</li>\n<li>\n<p>上传成功后，您可以在 “图床” 文件夹中看到已经上传的图片，右键点击分享图片。<font style=\"color:red\">值得注意的是，这个链接并不是图床的链接，而是一个有道云提供的一个查看页面，所以使用这个链接去关联图片是不会成功的</font>&gt;。可以访问如上链接一看究竟！</p>\n</li>\n<li>\n<p>使用浏览器打开图片，右键点击复制浏览器地址。</p>\n</li>\n</ol>\n<img data-src=\"https://note.youdao.com/yws/api/personal/file/WEBe84398aca918baed6117bb54d1dd3125?method=download&shareKey=7a4e036122b942b3dcc9a5b81ebdda9f\">\n<ol start=\"6\">\n<li>将复制或者获取的图片地址与 Markdown img 标签结合使用，就可以在您的文章中插入图片了。</li>\n</ol>\n<p class=\"note note-primary\">\nTips:<br>\n1. 请注意，有道云笔记中的文件不可以删除一旦删除你账户中的图片文件，有道云笔记的服务器将删除云空间中的资源，图床也就失效了。<br>\n2. 发现和在有道笔记内部的路径无关</p>\n<ol start=\"7\">\n<li>成功引用如下：</li>\n</ol>\n<img data-src='https://note.youdao.com/yws/api/personal/file/WEBaaadf7ea3c83dde3e100053b5afb4c0c?method=download&shareKey=1126ebee17a893b6dac325f5d7f5a8fe'>\n",
            "tags": [
                "test",
                "图床"
            ]
        },
        {
            "id": "http://example.com/2023/10/08/BaiduSyncdisk/markdown/md%E8%AF%AD%E6%B3%95/",
            "url": "http://example.com/2023/10/08/BaiduSyncdisk/markdown/md%E8%AF%AD%E6%B3%95/",
            "title": "Markdown模版",
            "date_published": "2023-10-08T09:47:18.000Z",
            "content_html": "<h3 id=\"一-markdown标题语法\"><a class=\"markdownIt-Anchor\" href=\"#一-markdown标题语法\">#</a> 一、Markdown 标题语法</h3>\n<p>要创建标题，请在单词或短语前面添加井号 ( <code>#</code> ) 。 <code>#</code>  的数量代表了标题的级别。例如，添加三个  <code>#</code>  表示创建一个三级标题</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"># Heading level 1</td>\n<td><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td>\n<td>Heading  level 1</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"可选语法\"><a class=\"markdownIt-Anchor\" href=\"#可选语法\">#</a> 可选语法：</h5>\n<p>还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 – 号来标识二级标题。</p>\n<h3 id=\"二-markdown段落语法\"><a class=\"markdownIt-Anchor\" href=\"#二-markdown段落语法\">#</a> 二、Markdown 段落语法</h3>\n<p>​\t要创建段落，请使用空白行将一行或多行文本进行分隔。</p>\n<table>\n<thead>\n<tr>\n<th>Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>I really like using Markdown.I think I'll use it to format all of my documents from now on.</code></td>\n<td><code>&lt;p&gt;I really like using Markdown.&lt;/p&gt;&lt;p&gt;I think I'll use it to format all of my documents from now on.&lt;/p&gt;</code></td>\n<td>I really like using Markdown.                       I think I’ll use it to format all of my documents from now on</td>\n</tr>\n</tbody>\n</table>\n<p><font style=\"color:red\"><strong>不要用空格（spaces）或制表符（ tabs）缩进段落</strong></font></p>\n<h3 id=\"三-markdown换行语法\"><a class=\"markdownIt-Anchor\" href=\"#三-markdown换行语法\">#</a> 三、Markdown 换行语法</h3>\n<p>在一行的末尾添加两个或多个空格，然后按回车键，即可创建一个换行 ( <code>&lt;br&gt;</code> )</p>\n<table>\n<thead>\n<tr>\n<th>Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>This is the first line.  And this is the second line.</code></td>\n<td><code>&lt;p&gt;This is the first line.&lt;br&gt;And this is the second line.&lt;/p&gt;</code></td>\n<td>This is the first line. And this is the second line.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"换行line-break用法的最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#换行line-break用法的最佳实践\">#</a> 换行（Line Break）用法的最佳实践：</h5>\n<p>几乎每个 Markdown 应用程序都支持两个或多个空格进行换行，称为  <code>结尾空格（trailing whitespace)</code>  的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的  <code>&lt;br&gt;</code>  标签。</p>\n<p>为了兼容性，请在行尾添加 “结尾空格” 或 HTML 的  <code>&lt;br&gt;</code>  标签来实现换行。</p>\n<h3 id=\"四-markdown强调语法\"><a class=\"markdownIt-Anchor\" href=\"#四-markdown强调语法\">#</a> 四、Markdown 强调语法</h3>\n<p>通过将文本设置为粗体或斜体来强调其重要性。</p>\n<h5 id=\"粗体bold\"><a class=\"markdownIt-Anchor\" href=\"#粗体bold\">#</a> 粗体（Bold）：</h5>\n<p>要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（不推荐使用）（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。</p>\n<table>\n<thead>\n<tr>\n<th>Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>I just love **bold text**.</code></td>\n<td><code>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</code></td>\n<td>I just love <strong>bold text</strong>.</td>\n</tr>\n<tr>\n<td><code>I just love __bold text__.</code></td>\n<td><code>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</code></td>\n<td>I just love <strong>bold text</strong>.</td>\n</tr>\n<tr>\n<td><code>Love**is**bold</code></td>\n<td><code>Love&lt;strong&gt;is&lt;/strong&gt;bold</code></td>\n<td>Love<strong>is</strong>bold</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"斜体italic\"><a class=\"markdownIt-Anchor\" href=\"#斜体italic\">#</a> 斜体（Italic）：</h5>\n<p>要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p>\n<table>\n<thead>\n<tr>\n<th>Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Italicized text is the *cat's meow*.</code></td>\n<td><code>Italicized text is the &lt;em&gt;cat's meow&lt;/em&gt;.</code></td>\n<td>Italicized text is the <em>cat’s meow</em>.</td>\n</tr>\n<tr>\n<td><code>Italicized text is the _cat's meow_.</code></td>\n<td><code>Italicized text is the &lt;em&gt;cat's meow&lt;/em&gt;.</code></td>\n<td>Italicized text is the <em>cat’s meow</em>.</td>\n</tr>\n<tr>\n<td><code>A*cat*meow</code></td>\n<td><code>A&lt;em&gt;cat&lt;/em&gt;meow</code></td>\n<td>A<em>cat</em>meow</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"斜体italic用法的最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#斜体italic用法的最佳实践\">#</a> 斜体（Italic）用法的最佳实践 ：</h5>\n<p><em><strong>要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。</strong></em></p>\n<h5 id=\"删除线\"><a class=\"markdownIt-Anchor\" href=\"#删除线\">#</a> 删除线:</h5>\n<p>您可以通过在单词中心放置一条水平线来删除单词。结果看起来像这样。此功能使您可以指示某些单词是一个错误，要从文档中删除。若要删除单词，请在单词前后使用两个波浪号 <code>~~</code> 。</p>\n<p>示例入下：</p>\n<p><s>删除线</s></p>\n<h3 id=\"五-markdown引用语法\"><a class=\"markdownIt-Anchor\" href=\"#五-markdown引用语法\">#</a> 五、Markdown 引用语法</h3>\n<p>要创建块引用，请在段落前添加一个  <code>&gt;</code>  符号</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>>这是一个引用语句</pre></td></tr></table></figure><p>效果如下：</p>\n<blockquote>\n<p>这是一个引用语句；</p>\n</blockquote>\n<h5 id=\"多个段落的块引用\"><a class=\"markdownIt-Anchor\" href=\"#多个段落的块引用\">#</a> 多个段落的块引用：</h5>\n<p>块引用可以包含多个段落。为段落之间的空白行添加一个  <code>&gt;</code>  符号。</p>\n<blockquote>\n<p>段落一；</p>\n<p>段落二；</p>\n</blockquote>\n<h5 id=\"嵌套块引用\"><a class=\"markdownIt-Anchor\" href=\"#嵌套块引用\">#</a> 嵌套块引用：</h5>\n<p>块引用可以嵌套。在要嵌套的段落前添加一个  <code>&gt;&gt;</code>  符号。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>> 段落一;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>> 嵌套段落二;</pre></td></tr></table></figure><p>效果如下：</p>\n<blockquote>\n<p>段落一；</p>\n<blockquote>\n<p>段落二；</p>\n</blockquote>\n</blockquote>\n<h5 id=\"带有其它元素的块引用\"><a class=\"markdownIt-Anchor\" href=\"#带有其它元素的块引用\">#</a> 带有其它元素的块引用：</h5>\n<p>块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。</p>\n<p>可以使用的元素如下（后续如有还会补充）</p>\n<blockquote>\n<p><em>斜体</em></p>\n<p><strong>粗体</strong></p>\n<p><em><strong>粗斜体</strong></em></p>\n<ul>\n<li>无序列表 1</li>\n<li>无序列表 2</li>\n</ul>\n</blockquote>\n<h3 id=\"六-markdown列表语法\"><a class=\"markdownIt-Anchor\" href=\"#六-markdown列表语法\">#</a> 六、Markdown 列表语法</h3>\n<p><font style=\"color:red\">可以将多个条目组织成有序或无序列表。</font></p>\n<h5 id=\"有序列表\"><a class=\"markdownIt-Anchor\" href=\"#有序列表\">#</a> 有序列表：</h5>\n<p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p>\n<table>\n<thead>\n<tr>\n<th>Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1. First item2. Second item3. Third item4. Fourth item</code></td>\n<td><code>&lt;ol&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ol&gt;</code></td>\n<td>First itemSecond itemThird itemFourth item</td>\n</tr>\n</tbody>\n</table>\n<p>如下所示</p>\n<ol>\n<li>有序列表 1</li>\n<li>有序列表 2</li>\n<li>有序列表 3</li>\n</ol>\n<h5 id=\"无序列表\"><a class=\"markdownIt-Anchor\" href=\"#无序列表\">#</a> 无序列表：</h5>\n<p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p>\n<ul>\n<li>\n<p>无序列表 1</p>\n<ul>\n<li>无序列表 1.1</li>\n<li>无序列表 1.2</li>\n</ul>\n</li>\n<li>\n<p>无序列表 2</p>\n</li>\n</ul>\n<h5 id=\"在列表中嵌套其他元素\"><a class=\"markdownIt-Anchor\" href=\"#在列表中嵌套其他元素\">#</a> 在列表中嵌套其他元素：</h5>\n<p>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符，如下例所示：</p>\n<ol>\n<li>有序列表 1\n<ul>\n<li>无序列表 1</li>\n<li>无序列表 2</li>\n</ul>\n</li>\n<li>有序列表 2</li>\n</ol>\n<h3 id=\"七-markdown代码语法\"><a class=\"markdownIt-Anchor\" href=\"#七-markdown代码语法\">#</a> 七、Markdown 代码语法</h3>\n<p>要将单词或短语表示为代码，请将其包裹在反引号 (``) 中。</p>\n<table>\n<thead>\n<tr>\n<th>Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>At the command prompt, type </code> nano <code>.</code></td>\n<td><code>At the command prompt, type &lt;code&gt;nano&lt;/code&gt;.</code></td>\n<td>At the command prompt, type  <code>nano</code> .</td>\n</tr>\n</tbody>\n</table>\n<p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号 (````) 中。</p>\n<table>\n<thead>\n<tr>\n<th>Markdown 语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Use `code` in your Markdown file.</code></td>\n<td><code>&lt;code&gt;Use </code> code <code> in your Markdown file.&lt;/code&gt;</code></td>\n<td><code>Use </code> code <code> in your Markdown file.</code></td>\n</tr>\n</tbody>\n</table>\n<p><code>这是一段代码！！！！</code></p>\n<h5 id=\"markdown-围栏代码块\"><a class=\"markdownIt-Anchor\" href=\"#markdown-围栏代码块\">#</a> Markdown 围栏代码块:</h5>\n<p>Markdown 基本语法允许您通过将行缩进四个空格或一个制表符来创建代码块。如果发现不方便，请尝试使用受保护的代码块。根据 Markdown 处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号（(`````）或三个波浪号（~~~）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这个是一个代码块</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    hello world！！！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">return</span></pre></td></tr></table></figure><h5 id=\"语法高亮\"><a class=\"markdownIt-Anchor\" href=\"#语法高亮\">#</a> 语法高亮：</h5>\n<p>许多 Markdown 处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在<font style=\"color:red\">受防护的代码块之前的反引号旁边指定一种语言。</font></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>```json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"firstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"lastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>```</pre></td></tr></table></figure><h3 id=\"八-markdown分隔线语法\"><a class=\"markdownIt-Anchor\" href=\"#八-markdown分隔线语法\">#</a> 八、 Markdown 分隔线语法</h3>\n<p>要创建分隔线，请在单独一行上使用三个或多个星号 ( <code>***</code> )、破折号 ( <code>---</code> ) 或下划线 ( <code>___</code> ) ，并且不能包含其他内容。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>***</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>_________________</pre></td></tr></table></figure><p>如下图所示：</p>\n<hr>\n<h5 id=\"分隔线horizontal-rule用法最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#分隔线horizontal-rule用法最佳实践\">#</a> 分隔线（Horizontal Rule）用法最佳实践</h5>\n<p><font style=\"color:red\">为了兼容性，请在分隔线的前后均添加空白行。</font></p>\n<h3 id=\"九-markdown链接语法\"><a class=\"markdownIt-Anchor\" href=\"#九-markdown链接语法\">#</a> 九、Markdown 链接语法</h3>\n<p>链接文本放在中括号内，链接地址放在后面的括号中，链接 title 可选。</p>\n<p>超链接 Markdown 语法代码： <code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p>\n<p>对应的 HTML 代码： <code>&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code></p>\n<p>示例：</p>\n<p>这是一个 Markdown 语法链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZG93bi5jb20uY24=\"> Markdown 官方教程</span>。</p>\n<p>这是一个 HTML 语法链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZG93bi5jb20uY24=\">Markdown 官方教程</span>。</p>\n<h5 id=\"给链接增加-title\"><a class=\"markdownIt-Anchor\" href=\"#给链接增加-title\">#</a> 给链接增加 Title:</h5>\n<p>链接 title 是当鼠标悬停在链接上时会出现的文字，这个 title 是可选的，内容添加引号 <code>&quot;&quot;</code>  放在圆括号中链接地址后面，跟链接地址之间以空格分隔。</p>\n<p>这是一个 Markdown 语法链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZG93bi5jb20uY24=\"> Markdown 官方教程</span>。</p>\n<p>这是一个 HTML 语法链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZG93bi5jb20uY24=\">Markdown 官方教程</span>。</p>\n<h5 id=\"网址和email地址\"><a class=\"markdownIt-Anchor\" href=\"#网址和email地址\">#</a> 网址和 Email 地址:</h5>\n<p>使用尖括号可以很方便地把 URL 或者 email 地址变成可点击的链接。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;https://markdown.com.cn></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZG93bi5jb20uY24=\">https://markdown.com.cn</span></p>\n<h5 id=\"引用类型链接一般用不到\"><a class=\"markdownIt-Anchor\" href=\"#引用类型链接一般用不到\">#</a> 引用类型链接:[一般用不到]</h5>\n<p>引用样式链接是一种特殊的链接，它使 URL 在 Markdown 中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。</p>\n<h6 id=\"链接的第一部分格式\"><a class=\"markdownIt-Anchor\" href=\"#链接的第一部分格式\">#</a> 链接的第一部分格式</h6>\n<p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p>\n<p>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p>\n<p>以下示例格式对于链接的第一部分效果相同：</p>\n<ul>\n<li><code>[hobbit-hole][1]</code></li>\n<li><code>[hobbit-hole] [1]</code></li>\n</ul>\n<h6 id=\"链接的第二部分格式\"><a class=\"markdownIt-Anchor\" href=\"#链接的第二部分格式\">#</a> 链接的第二部分格式</h6>\n<p>引用类型链接的第二部分使用以下属性设置格式：</p>\n<ol>\n<li>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如 <code>[label]:</code> ）。</li>\n<li>链接的 URL，可以选择将其括在尖括号中。</li>\n<li>链接的可选标题，可以将其括在双引号，单引号或括号中。</li>\n</ol>\n<h3 id=\"十-markdown图片语法\"><a class=\"markdownIt-Anchor\" href=\"#十-markdown图片语法\">#</a> 十、Markdown 图片语法</h3>\n<p>要添加图像，请使用感叹号 ( <code>!</code> ), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p>\n<p>插入图片 Markdown 语法代码： <code>![图片alt](图片链接 &quot;图片title&quot;)</code> 。</p>\n<p>对应的 HTML 代码： <code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code></p>\n<p><img data-src=\"/img/avatar.png\" alt=\"\"></p>\n<h5 id=\"链接图片\"><a class=\"markdownIt-Anchor\" href=\"#链接图片\">#</a> 链接图片：</h5>\n<p>给图片增加链接，请将图像的 Markdown 括在方括号中，然后将链接添加在圆括号中。</p>\n<p><a href=\"https://markdown.com.cn\"><img data-src=\"/img/avatar.png\" alt=\"我的头像\"></a></p>\n<h3 id=\"十一-markdown转义字符语法\"><a class=\"markdownIt-Anchor\" href=\"#十一-markdown转义字符语法\">#</a> 十一、Markdown 转义字符语法</h3>\n<p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \\ 。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>\\* Without the backslash, this would be a bullet in an unordered list.</pre></td></tr></table></figure><p>渲染效果如下：</p>\n<p>* Without the backslash, this would be a bullet in an unordered list.</p>\n<h5 id=\"特殊字符自动转义\"><a class=\"markdownIt-Anchor\" href=\"#特殊字符自动转义\">#</a> 特殊字符自动转义:</h5>\n<p>在 HTML 文件中，有两个字符需要特殊处理：  <code>&lt;</code>  和  <code>&amp;</code>  。  <code>&lt;</code>  符号用于起始标签， <code>&amp;</code>  符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是  <code>&lt;</code>  和  <code>&amp;</code> 。Markdown 允许你直接使用这些符号，它帮你自动转义字符。如果你使用  <code>&amp;</code>  符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成  <code>&amp;</code> 。</p>\n<h3 id=\"十二-内嵌-html-标签\"><a class=\"markdownIt-Anchor\" href=\"#十二-内嵌-html-标签\">#</a> 十二、内嵌 HTML 标签</h3>\n<p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p>\n<h5 id=\"行级內联标签\"><a class=\"markdownIt-Anchor\" href=\"#行级內联标签\">#</a> 行级內联标签:</h5>\n<p>HTML 的行级內联标签如  <code>&lt;span&gt;</code> 、 <code>&lt;cite&gt;</code> 、 <code>&lt;del&gt;</code>  不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的  <code>&lt;a&gt;</code>  或  <code>&lt;img&gt;</code>  标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p>\n<p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>This **word** is bold. This &lt;em>word&lt;/em> is italic.</pre></td></tr></table></figure><p>渲染效果如下:</p>\n<p>This <strong>word</strong> is bold. This <em>word</em> is italic.</p>\n<h5 id=\"区块标签\"><a class=\"markdownIt-Anchor\" href=\"#区块标签\">#</a> 区块标签:</h5>\n<p>区块元素──比如  <code>&lt;div&gt;</code> 、 <code>&lt;table&gt;</code> 、 <code>&lt;pre&gt;</code> 、 <code>&lt;p&gt;</code>  等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的  <code>&lt;p&gt;</code>  标签。</p>\n<p>例如，在 Markdown 文件里加上一段 HTML 表格：</p>\n<pre><code>This is a regular paragraph.\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foo&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n\nThis is another regular paragraph.\n</code></pre>\n<p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的 <code>*强调*</code> 。</p>\n<h5 id=\"html-用法最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#html-用法最佳实践\">#</a> HTML 用法最佳实践：</h5>\n<p>出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。</p>\n<p>对于 HTML 的块级元素  <code>&lt;div&gt;</code> 、 <code>&lt;table&gt;</code> 、 <code>&lt;pre&gt;</code>  和  <code>&lt;p&gt;</code> ，请在其前后使用空行（blank lines）与其它内容进行分隔。尽量不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进，否则将影响格式。</p>\n<p><font style=\"color:red\">在 HTML 块级标签内不能使用 Markdown 语法。例如  <code>&lt;p&gt;italic and **bold**&lt;/p&gt;</code>  将不起作用。</font></p>\n<h3 id=\"十三-markdown表格使用markdown软件-直接添加表格内容\"><a class=\"markdownIt-Anchor\" href=\"#十三-markdown表格使用markdown软件-直接添加表格内容\">#</a> 十三、Markdown 表格（使用 Markdown 软件 直接添加表格内容）</h3>\n<p>要添加表，请使用三个或多个连字符（ <code>---</code> ）创建每列的标题，并使用管道（ <code>|</code> ）分隔每列。您可以选择在表的任一端添加管道。对齐</p>\n<p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（ <code>:</code> ），将列中的文本对齐到左侧，右侧或中心。</p>\n<p>您可以在表格中设置文本格式。例如，您可以添加链接，代码（仅反引号（```）中的单词或短语，而不是代码块）和强调。</p>\n<p>您不能添加标题，块引用，列表，水平规则，图像或 HTML 标签。</p>\n<h3 id=\"十四-markdown脚注\"><a class=\"markdownIt-Anchor\" href=\"#十四-markdown脚注\">#</a> <a href=\"1\">十四、Markdown 脚注</a></h3>\n<p><strong>脚注</strong>，又名<strong>注脚</strong>，是读书所做的笔录、见解、体会、看法、观点、心得、感想的总称。脚注分为：头注、侧注、后注、割注、分注。来自<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFOCU4NCU5QSVFNiVCMyVBOA==\">维基百科</span></p>\n<p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳至页面底部的脚注内容。</p>\n<p>要创建脚注参考，请在方括号（ <code>[^1]</code> ）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联 - 在输出中，脚注按顺序编号。<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（ <code>[^1]: My footnote.</code> ）。您不必在文档末尾添加脚注。您可以将它们放在除列表，块引号和表之类的其他元素之外的任何位置。[^2 文档中脚注]</p>\n<h3 id=\"十五-任务列表语法\"><a class=\"markdownIt-Anchor\" href=\"#十五-任务列表语法\">#</a> 十五、任务列表语法</h3>\n<p>任务列表使您可以创建带有复选框的项目列表。在支持任务列表的 Markdown 应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号 <code>-</code>  和方括号 <code>[ ]</code> ，并在 <code>[ ]</code>  前面加上空格。要选择一个复选框，请在方括号 <code>[x]</code>  之间添加 x 。</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> 大方</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> 帅气</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> 多金</label></li>\n</ul>\n<h3 id=\"十六-使用-emoji-表情\"><a class=\"markdownIt-Anchor\" href=\"#十六-使用-emoji-表情\">#</a> 十六、使用 Emoji 表情</h3>\n<p>有两种方法可以将表情符号添加到 Markdown 文件中：将表情符号复制并粘贴到 Markdown 格式的文本中，或者键入<em> emoji shortcodes</em>。</p>\n<h5 id=\"复制和粘贴表情符号\"><a class=\"markdownIt-Anchor\" href=\"#复制和粘贴表情符号\">#</a> 复制和粘贴表情符号</h5>\n<p>在大多数情况下，您可以简单地从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbW9qaXBlZGlhLm9yZy8=\"> Emojipedia</span> 等来源复制表情符号并将其粘贴到文档中。许多 Markdown 应用程序会自动以 Markdown 格式的文本显示表情符号。从 Markdown 应用程序导出的 HTML 和 PDF 文件应显示表情符号。</p>\n<p>🤣</p>\n<p><strong>Tip:</strong> 如果您使用的是静态网站生成器，请确保将 HTML 页面编码为 UTF-8。.</p>\n<h5 id=\"使用表情符号简码\"><a class=\"markdownIt-Anchor\" href=\"#使用表情符号简码\">#</a> 使用表情符号简码</h5>\n<p>一些 Markdown 应用程序允许您通过键入表情符号短代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>脚注 1：文档末脚注 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "笔记",
                "Markdown"
            ]
        }
    ]
}